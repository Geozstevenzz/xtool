// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
package protocol APIProtocol: Sendable {
    /// - Remark: HTTP `POST /v1/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)`.
    func bundleIdCapabilities_createInstance(_ input: Operations.bundleIdCapabilities_createInstance.Input) async throws -> Operations.bundleIdCapabilities_createInstance.Output
    /// - Remark: HTTP `PATCH /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)`.
    func bundleIdCapabilities_updateInstance(_ input: Operations.bundleIdCapabilities_updateInstance.Input) async throws -> Operations.bundleIdCapabilities_updateInstance.Output
    /// - Remark: HTTP `DELETE /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)`.
    func bundleIdCapabilities_deleteInstance(_ input: Operations.bundleIdCapabilities_deleteInstance.Input) async throws -> Operations.bundleIdCapabilities_deleteInstance.Output
    /// - Remark: HTTP `GET /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)`.
    func bundleIds_getCollection(_ input: Operations.bundleIds_getCollection.Input) async throws -> Operations.bundleIds_getCollection.Output
    /// - Remark: HTTP `POST /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)`.
    func bundleIds_createInstance(_ input: Operations.bundleIds_createInstance.Input) async throws -> Operations.bundleIds_createInstance.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)`.
    func bundleIds_getInstance(_ input: Operations.bundleIds_getInstance.Input) async throws -> Operations.bundleIds_getInstance.Output
    /// - Remark: HTTP `PATCH /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)`.
    func bundleIds_updateInstance(_ input: Operations.bundleIds_updateInstance.Input) async throws -> Operations.bundleIds_updateInstance.Output
    /// - Remark: HTTP `DELETE /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)`.
    func bundleIds_deleteInstance(_ input: Operations.bundleIds_deleteInstance.Input) async throws -> Operations.bundleIds_deleteInstance.Output
    /// - Remark: HTTP `GET /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)`.
    func certificates_getCollection(_ input: Operations.certificates_getCollection.Input) async throws -> Operations.certificates_getCollection.Output
    /// - Remark: HTTP `POST /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)`.
    func certificates_createInstance(_ input: Operations.certificates_createInstance.Input) async throws -> Operations.certificates_createInstance.Output
    /// - Remark: HTTP `GET /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)`.
    func certificates_getInstance(_ input: Operations.certificates_getInstance.Input) async throws -> Operations.certificates_getInstance.Output
    /// - Remark: HTTP `DELETE /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)`.
    func certificates_deleteInstance(_ input: Operations.certificates_deleteInstance.Input) async throws -> Operations.certificates_deleteInstance.Output
    /// - Remark: HTTP `GET /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)`.
    func devices_getCollection(_ input: Operations.devices_getCollection.Input) async throws -> Operations.devices_getCollection.Output
    /// - Remark: HTTP `POST /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)`.
    func devices_createInstance(_ input: Operations.devices_createInstance.Input) async throws -> Operations.devices_createInstance.Output
    /// - Remark: HTTP `GET /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)`.
    func devices_getInstance(_ input: Operations.devices_getInstance.Input) async throws -> Operations.devices_getInstance.Output
    /// - Remark: HTTP `PATCH /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)`.
    func devices_updateInstance(_ input: Operations.devices_updateInstance.Input) async throws -> Operations.devices_updateInstance.Output
    /// - Remark: HTTP `GET /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)`.
    func profiles_getCollection(_ input: Operations.profiles_getCollection.Input) async throws -> Operations.profiles_getCollection.Output
    /// - Remark: HTTP `POST /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)`.
    func profiles_createInstance(_ input: Operations.profiles_createInstance.Input) async throws -> Operations.profiles_createInstance.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)`.
    func profiles_getInstance(_ input: Operations.profiles_getInstance.Input) async throws -> Operations.profiles_getInstance.Output
    /// - Remark: HTTP `DELETE /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)`.
    func profiles_deleteInstance(_ input: Operations.profiles_deleteInstance.Input) async throws -> Operations.profiles_deleteInstance.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)`.
    func bundleIds_app_getToOneRelated(_ input: Operations.bundleIds_app_getToOneRelated.Input) async throws -> Operations.bundleIds_app_getToOneRelated.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)`.
    func bundleIds_bundleIdCapabilities_getToManyRelated(_ input: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input) async throws -> Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)`.
    func bundleIds_profiles_getToManyRelated(_ input: Operations.bundleIds_profiles_getToManyRelated.Input) async throws -> Operations.bundleIds_profiles_getToManyRelated.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)`.
    func profiles_bundleId_getToOneRelated(_ input: Operations.profiles_bundleId_getToOneRelated.Input) async throws -> Operations.profiles_bundleId_getToOneRelated.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)`.
    func profiles_certificates_getToManyRelated(_ input: Operations.profiles_certificates_getToManyRelated.Input) async throws -> Operations.profiles_certificates_getToManyRelated.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)`.
    func profiles_devices_getToManyRelated(_ input: Operations.profiles_devices_getToManyRelated.Input) async throws -> Operations.profiles_devices_getToManyRelated.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `POST /v1/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)`.
    package func bundleIdCapabilities_createInstance(
        headers: Operations.bundleIdCapabilities_createInstance.Input.Headers = .init(),
        body: Operations.bundleIdCapabilities_createInstance.Input.Body
    ) async throws -> Operations.bundleIdCapabilities_createInstance.Output {
        try await bundleIdCapabilities_createInstance(Operations.bundleIdCapabilities_createInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PATCH /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)`.
    package func bundleIdCapabilities_updateInstance(
        path: Operations.bundleIdCapabilities_updateInstance.Input.Path,
        headers: Operations.bundleIdCapabilities_updateInstance.Input.Headers = .init(),
        body: Operations.bundleIdCapabilities_updateInstance.Input.Body
    ) async throws -> Operations.bundleIdCapabilities_updateInstance.Output {
        try await bundleIdCapabilities_updateInstance(Operations.bundleIdCapabilities_updateInstance.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `DELETE /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)`.
    package func bundleIdCapabilities_deleteInstance(
        path: Operations.bundleIdCapabilities_deleteInstance.Input.Path,
        headers: Operations.bundleIdCapabilities_deleteInstance.Input.Headers = .init()
    ) async throws -> Operations.bundleIdCapabilities_deleteInstance.Output {
        try await bundleIdCapabilities_deleteInstance(Operations.bundleIdCapabilities_deleteInstance.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)`.
    package func bundleIds_getCollection(
        query: Operations.bundleIds_getCollection.Input.Query = .init(),
        headers: Operations.bundleIds_getCollection.Input.Headers = .init()
    ) async throws -> Operations.bundleIds_getCollection.Output {
        try await bundleIds_getCollection(Operations.bundleIds_getCollection.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)`.
    package func bundleIds_createInstance(
        headers: Operations.bundleIds_createInstance.Input.Headers = .init(),
        body: Operations.bundleIds_createInstance.Input.Body
    ) async throws -> Operations.bundleIds_createInstance.Output {
        try await bundleIds_createInstance(Operations.bundleIds_createInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)`.
    package func bundleIds_getInstance(
        path: Operations.bundleIds_getInstance.Input.Path,
        query: Operations.bundleIds_getInstance.Input.Query = .init(),
        headers: Operations.bundleIds_getInstance.Input.Headers = .init()
    ) async throws -> Operations.bundleIds_getInstance.Output {
        try await bundleIds_getInstance(Operations.bundleIds_getInstance.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PATCH /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)`.
    package func bundleIds_updateInstance(
        path: Operations.bundleIds_updateInstance.Input.Path,
        headers: Operations.bundleIds_updateInstance.Input.Headers = .init(),
        body: Operations.bundleIds_updateInstance.Input.Body
    ) async throws -> Operations.bundleIds_updateInstance.Output {
        try await bundleIds_updateInstance(Operations.bundleIds_updateInstance.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `DELETE /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)`.
    package func bundleIds_deleteInstance(
        path: Operations.bundleIds_deleteInstance.Input.Path,
        headers: Operations.bundleIds_deleteInstance.Input.Headers = .init()
    ) async throws -> Operations.bundleIds_deleteInstance.Output {
        try await bundleIds_deleteInstance(Operations.bundleIds_deleteInstance.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)`.
    package func certificates_getCollection(
        query: Operations.certificates_getCollection.Input.Query = .init(),
        headers: Operations.certificates_getCollection.Input.Headers = .init()
    ) async throws -> Operations.certificates_getCollection.Output {
        try await certificates_getCollection(Operations.certificates_getCollection.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)`.
    package func certificates_createInstance(
        headers: Operations.certificates_createInstance.Input.Headers = .init(),
        body: Operations.certificates_createInstance.Input.Body
    ) async throws -> Operations.certificates_createInstance.Output {
        try await certificates_createInstance(Operations.certificates_createInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)`.
    package func certificates_getInstance(
        path: Operations.certificates_getInstance.Input.Path,
        query: Operations.certificates_getInstance.Input.Query = .init(),
        headers: Operations.certificates_getInstance.Input.Headers = .init()
    ) async throws -> Operations.certificates_getInstance.Output {
        try await certificates_getInstance(Operations.certificates_getInstance.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `DELETE /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)`.
    package func certificates_deleteInstance(
        path: Operations.certificates_deleteInstance.Input.Path,
        headers: Operations.certificates_deleteInstance.Input.Headers = .init()
    ) async throws -> Operations.certificates_deleteInstance.Output {
        try await certificates_deleteInstance(Operations.certificates_deleteInstance.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)`.
    package func devices_getCollection(
        query: Operations.devices_getCollection.Input.Query = .init(),
        headers: Operations.devices_getCollection.Input.Headers = .init()
    ) async throws -> Operations.devices_getCollection.Output {
        try await devices_getCollection(Operations.devices_getCollection.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)`.
    package func devices_createInstance(
        headers: Operations.devices_createInstance.Input.Headers = .init(),
        body: Operations.devices_createInstance.Input.Body
    ) async throws -> Operations.devices_createInstance.Output {
        try await devices_createInstance(Operations.devices_createInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)`.
    package func devices_getInstance(
        path: Operations.devices_getInstance.Input.Path,
        query: Operations.devices_getInstance.Input.Query = .init(),
        headers: Operations.devices_getInstance.Input.Headers = .init()
    ) async throws -> Operations.devices_getInstance.Output {
        try await devices_getInstance(Operations.devices_getInstance.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PATCH /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)`.
    package func devices_updateInstance(
        path: Operations.devices_updateInstance.Input.Path,
        headers: Operations.devices_updateInstance.Input.Headers = .init(),
        body: Operations.devices_updateInstance.Input.Body
    ) async throws -> Operations.devices_updateInstance.Output {
        try await devices_updateInstance(Operations.devices_updateInstance.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)`.
    package func profiles_getCollection(
        query: Operations.profiles_getCollection.Input.Query = .init(),
        headers: Operations.profiles_getCollection.Input.Headers = .init()
    ) async throws -> Operations.profiles_getCollection.Output {
        try await profiles_getCollection(Operations.profiles_getCollection.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)`.
    package func profiles_createInstance(
        headers: Operations.profiles_createInstance.Input.Headers = .init(),
        body: Operations.profiles_createInstance.Input.Body
    ) async throws -> Operations.profiles_createInstance.Output {
        try await profiles_createInstance(Operations.profiles_createInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)`.
    package func profiles_getInstance(
        path: Operations.profiles_getInstance.Input.Path,
        query: Operations.profiles_getInstance.Input.Query = .init(),
        headers: Operations.profiles_getInstance.Input.Headers = .init()
    ) async throws -> Operations.profiles_getInstance.Output {
        try await profiles_getInstance(Operations.profiles_getInstance.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `DELETE /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)`.
    package func profiles_deleteInstance(
        path: Operations.profiles_deleteInstance.Input.Path,
        headers: Operations.profiles_deleteInstance.Input.Headers = .init()
    ) async throws -> Operations.profiles_deleteInstance.Output {
        try await profiles_deleteInstance(Operations.profiles_deleteInstance.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)`.
    package func bundleIds_app_getToOneRelated(
        path: Operations.bundleIds_app_getToOneRelated.Input.Path,
        query: Operations.bundleIds_app_getToOneRelated.Input.Query = .init(),
        headers: Operations.bundleIds_app_getToOneRelated.Input.Headers = .init()
    ) async throws -> Operations.bundleIds_app_getToOneRelated.Output {
        try await bundleIds_app_getToOneRelated(Operations.bundleIds_app_getToOneRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)`.
    package func bundleIds_bundleIdCapabilities_getToManyRelated(
        path: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Path,
        query: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Query = .init(),
        headers: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Headers = .init()
    ) async throws -> Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output {
        try await bundleIds_bundleIdCapabilities_getToManyRelated(Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)`.
    package func bundleIds_profiles_getToManyRelated(
        path: Operations.bundleIds_profiles_getToManyRelated.Input.Path,
        query: Operations.bundleIds_profiles_getToManyRelated.Input.Query = .init(),
        headers: Operations.bundleIds_profiles_getToManyRelated.Input.Headers = .init()
    ) async throws -> Operations.bundleIds_profiles_getToManyRelated.Output {
        try await bundleIds_profiles_getToManyRelated(Operations.bundleIds_profiles_getToManyRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)`.
    package func profiles_bundleId_getToOneRelated(
        path: Operations.profiles_bundleId_getToOneRelated.Input.Path,
        query: Operations.profiles_bundleId_getToOneRelated.Input.Query = .init(),
        headers: Operations.profiles_bundleId_getToOneRelated.Input.Headers = .init()
    ) async throws -> Operations.profiles_bundleId_getToOneRelated.Output {
        try await profiles_bundleId_getToOneRelated(Operations.profiles_bundleId_getToOneRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)`.
    package func profiles_certificates_getToManyRelated(
        path: Operations.profiles_certificates_getToManyRelated.Input.Path,
        query: Operations.profiles_certificates_getToManyRelated.Input.Query = .init(),
        headers: Operations.profiles_certificates_getToManyRelated.Input.Headers = .init()
    ) async throws -> Operations.profiles_certificates_getToManyRelated.Output {
        try await profiles_certificates_getToManyRelated(Operations.profiles_certificates_getToManyRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)`.
    package func profiles_devices_getToManyRelated(
        path: Operations.profiles_devices_getToManyRelated.Input.Path,
        query: Operations.profiles_devices_getToManyRelated.Input.Query = .init(),
        headers: Operations.profiles_devices_getToManyRelated.Input.Headers = .init()
    ) async throws -> Operations.profiles_devices_getToManyRelated.Output {
        try await profiles_devices_getToManyRelated(Operations.profiles_devices_getToManyRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
package enum Servers {
    package enum Server1 {
        package static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.appstoreconnect.apple.com/",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    package static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.appstoreconnect.apple.com/",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
package enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    package enum Schemas {
        /// - Remark: Generated from `#/components/schemas/App`.
        package struct App: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/App/type`.
            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case apps = "apps"
            }
            /// - Remark: Generated from `#/components/schemas/App/type`.
            package var _type: Components.Schemas.App._typePayload
            /// - Remark: Generated from `#/components/schemas/App/id`.
            package var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/attributes`.
            package struct attributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/App/attributes/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/bundleId`.
                package var bundleId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/sku`.
                package var sku: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/primaryLocale`.
                package var primaryLocale: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/isOrEverWasMadeForKids`.
                package var isOrEverWasMadeForKids: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/App/attributes/subscriptionStatusUrl`.
                package var subscriptionStatusUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/subscriptionStatusUrlVersion`.
                package var subscriptionStatusUrlVersion: Components.Schemas.SubscriptionStatusUrlVersion?
                /// - Remark: Generated from `#/components/schemas/App/attributes/subscriptionStatusUrlForSandbox`.
                package var subscriptionStatusUrlForSandbox: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/subscriptionStatusUrlVersionForSandbox`.
                package var subscriptionStatusUrlVersionForSandbox: Components.Schemas.SubscriptionStatusUrlVersion?
                /// - Remark: Generated from `#/components/schemas/App/attributes/contentRightsDeclaration`.
                @frozen package enum contentRightsDeclarationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case DOES_NOT_USE_THIRD_PARTY_CONTENT = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
                    case USES_THIRD_PARTY_CONTENT = "USES_THIRD_PARTY_CONTENT"
                }
                /// - Remark: Generated from `#/components/schemas/App/attributes/contentRightsDeclaration`.
                package var contentRightsDeclaration: Components.Schemas.App.attributesPayload.contentRightsDeclarationPayload?
                /// - Remark: Generated from `#/components/schemas/App/attributes/streamlinedPurchasingEnabled`.
                package var streamlinedPurchasingEnabled: Swift.Bool?
                /// Creates a new `attributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - bundleId:
                ///   - sku:
                ///   - primaryLocale:
                ///   - isOrEverWasMadeForKids:
                ///   - subscriptionStatusUrl:
                ///   - subscriptionStatusUrlVersion:
                ///   - subscriptionStatusUrlForSandbox:
                ///   - subscriptionStatusUrlVersionForSandbox:
                ///   - contentRightsDeclaration:
                ///   - streamlinedPurchasingEnabled:
                package init(
                    name: Swift.String? = nil,
                    bundleId: Swift.String? = nil,
                    sku: Swift.String? = nil,
                    primaryLocale: Swift.String? = nil,
                    isOrEverWasMadeForKids: Swift.Bool? = nil,
                    subscriptionStatusUrl: Swift.String? = nil,
                    subscriptionStatusUrlVersion: Components.Schemas.SubscriptionStatusUrlVersion? = nil,
                    subscriptionStatusUrlForSandbox: Swift.String? = nil,
                    subscriptionStatusUrlVersionForSandbox: Components.Schemas.SubscriptionStatusUrlVersion? = nil,
                    contentRightsDeclaration: Components.Schemas.App.attributesPayload.contentRightsDeclarationPayload? = nil,
                    streamlinedPurchasingEnabled: Swift.Bool? = nil
                ) {
                    self.name = name
                    self.bundleId = bundleId
                    self.sku = sku
                    self.primaryLocale = primaryLocale
                    self.isOrEverWasMadeForKids = isOrEverWasMadeForKids
                    self.subscriptionStatusUrl = subscriptionStatusUrl
                    self.subscriptionStatusUrlVersion = subscriptionStatusUrlVersion
                    self.subscriptionStatusUrlForSandbox = subscriptionStatusUrlForSandbox
                    self.subscriptionStatusUrlVersionForSandbox = subscriptionStatusUrlVersionForSandbox
                    self.contentRightsDeclaration = contentRightsDeclaration
                    self.streamlinedPurchasingEnabled = streamlinedPurchasingEnabled
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case bundleId
                    case sku
                    case primaryLocale
                    case isOrEverWasMadeForKids
                    case subscriptionStatusUrl
                    case subscriptionStatusUrlVersion
                    case subscriptionStatusUrlForSandbox
                    case subscriptionStatusUrlVersionForSandbox
                    case contentRightsDeclaration
                    case streamlinedPurchasingEnabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/App/attributes`.
            package var attributes: Components.Schemas.App.attributesPayload?
            /// - Remark: Generated from `#/components/schemas/App/relationships`.
            package struct relationshipsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations`.
                package struct appEncryptionDeclarationsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appEncryptionDeclarations = "appEncryptionDeclarations"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.appEncryptionDeclarationsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.appEncryptionDeclarationsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.appEncryptionDeclarationsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.appEncryptionDeclarationsPayload.dataPayload?
                    /// Creates a new `appEncryptionDeclarationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.appEncryptionDeclarationsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations`.
                package var appEncryptionDeclarations: Components.Schemas.App.relationshipsPayload.appEncryptionDeclarationsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct`.
                package struct ciProductPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data`.
                    package struct dataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case ciProducts = "ciProducts"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.ciProductPayload.dataPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.ciProductPayload.dataPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.ciProductPayload.dataPayload?
                    /// Creates a new `ciProductPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.relationshipsPayload.ciProductPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct`.
                package var ciProduct: Components.Schemas.App.relationshipsPayload.ciProductPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaTesters`.
                package struct betaTestersPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaTesters/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `betaTestersPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaTesters`.
                package var betaTesters: Components.Schemas.App.relationshipsPayload.betaTestersPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups`.
                package struct betaGroupsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case betaGroups = "betaGroups"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.betaGroupsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.betaGroupsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.betaGroupsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.betaGroupsPayload.dataPayload?
                    /// Creates a new `betaGroupsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.betaGroupsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups`.
                package var betaGroups: Components.Schemas.App.relationshipsPayload.betaGroupsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions`.
                package struct appStoreVersionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appStoreVersions = "appStoreVersions"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.appStoreVersionsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.appStoreVersionsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.appStoreVersionsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.appStoreVersionsPayload.dataPayload?
                    /// Creates a new `appStoreVersionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.appStoreVersionsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions`.
                package var appStoreVersions: Components.Schemas.App.relationshipsPayload.appStoreVersionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions`.
                package struct preReleaseVersionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case preReleaseVersions = "preReleaseVersions"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.preReleaseVersionsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.preReleaseVersionsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.preReleaseVersionsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.preReleaseVersionsPayload.dataPayload?
                    /// Creates a new `preReleaseVersionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.preReleaseVersionsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions`.
                package var preReleaseVersions: Components.Schemas.App.relationshipsPayload.preReleaseVersionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations`.
                package struct betaAppLocalizationsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case betaAppLocalizations = "betaAppLocalizations"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.betaAppLocalizationsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.betaAppLocalizationsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.betaAppLocalizationsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.betaAppLocalizationsPayload.dataPayload?
                    /// Creates a new `betaAppLocalizationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.betaAppLocalizationsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations`.
                package var betaAppLocalizations: Components.Schemas.App.relationshipsPayload.betaAppLocalizationsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/builds`.
                package struct buildsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/builds/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case builds = "builds"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/builds/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.buildsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/builds/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.buildsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.buildsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.buildsPayload.dataPayload?
                    /// Creates a new `buildsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.buildsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/builds`.
                package var builds: Components.Schemas.App.relationshipsPayload.buildsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement`.
                package struct betaLicenseAgreementPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data`.
                    package struct dataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case betaLicenseAgreements = "betaLicenseAgreements"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.betaLicenseAgreementPayload.dataPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.betaLicenseAgreementPayload.dataPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.betaLicenseAgreementPayload.dataPayload?
                    /// Creates a new `betaLicenseAgreementPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.relationshipsPayload.betaLicenseAgreementPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement`.
                package var betaLicenseAgreement: Components.Schemas.App.relationshipsPayload.betaLicenseAgreementPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail`.
                package struct betaAppReviewDetailPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data`.
                    package struct dataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case betaAppReviewDetails = "betaAppReviewDetails"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.betaAppReviewDetailPayload.dataPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.betaAppReviewDetailPayload.dataPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.betaAppReviewDetailPayload.dataPayload?
                    /// Creates a new `betaAppReviewDetailPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.relationshipsPayload.betaAppReviewDetailPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail`.
                package var betaAppReviewDetail: Components.Schemas.App.relationshipsPayload.betaAppReviewDetailPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos`.
                package struct appInfosPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appInfos = "appInfos"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.appInfosPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.appInfosPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.appInfosPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.appInfosPayload.dataPayload?
                    /// Creates a new `appInfosPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.appInfosPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos`.
                package var appInfos: Components.Schemas.App.relationshipsPayload.appInfosPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appClips`.
                package struct appClipsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appClips = "appClips"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.appClipsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.appClipsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.appClipsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.appClipsPayload.dataPayload?
                    /// Creates a new `appClipsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.appClipsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appClips`.
                package var appClips: Components.Schemas.App.relationshipsPayload.appClipsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appPricePoints`.
                package struct appPricePointsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appPricePoints/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `appPricePointsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appPricePoints`.
                package var appPricePoints: Components.Schemas.App.relationshipsPayload.appPricePointsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement`.
                package struct endUserLicenseAgreementPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data`.
                    package struct dataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case endUserLicenseAgreements = "endUserLicenseAgreements"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.endUserLicenseAgreementPayload.dataPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.endUserLicenseAgreementPayload.dataPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.endUserLicenseAgreementPayload.dataPayload?
                    /// Creates a new `endUserLicenseAgreementPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.relationshipsPayload.endUserLicenseAgreementPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement`.
                package var endUserLicenseAgreement: Components.Schemas.App.relationshipsPayload.endUserLicenseAgreementPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appPriceSchedule`.
                package struct appPriceSchedulePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appPriceSchedule/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `appPriceSchedulePayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appPriceSchedule`.
                package var appPriceSchedule: Components.Schemas.App.relationshipsPayload.appPriceSchedulePayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appAvailabilityV2`.
                package struct appAvailabilityV2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appAvailabilityV2/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `appAvailabilityV2Payload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appAvailabilityV2`.
                package var appAvailabilityV2: Components.Schemas.App.relationshipsPayload.appAvailabilityV2Payload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases`.
                @available(*, deprecated)
                package struct inAppPurchasesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case inAppPurchases = "inAppPurchases"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.inAppPurchasesPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.inAppPurchasesPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.inAppPurchasesPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.inAppPurchasesPayload.dataPayload?
                    /// Creates a new `inAppPurchasesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.inAppPurchasesPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases`.
                @available(*, deprecated)
                package var inAppPurchases: Components.Schemas.App.relationshipsPayload.inAppPurchasesPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups`.
                package struct subscriptionGroupsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case subscriptionGroups = "subscriptionGroups"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.subscriptionGroupsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.subscriptionGroupsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.subscriptionGroupsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.subscriptionGroupsPayload.dataPayload?
                    /// Creates a new `subscriptionGroupsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.subscriptionGroupsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups`.
                package var subscriptionGroups: Components.Schemas.App.relationshipsPayload.subscriptionGroupsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions`.
                package struct gameCenterEnabledVersionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case gameCenterEnabledVersions = "gameCenterEnabledVersions"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.gameCenterEnabledVersionsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.gameCenterEnabledVersionsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.gameCenterEnabledVersionsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.gameCenterEnabledVersionsPayload.dataPayload?
                    /// Creates a new `gameCenterEnabledVersionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.gameCenterEnabledVersionsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions`.
                package var gameCenterEnabledVersions: Components.Schemas.App.relationshipsPayload.gameCenterEnabledVersionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/perfPowerMetrics`.
                package struct perfPowerMetricsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/perfPowerMetrics/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `perfPowerMetricsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/perfPowerMetrics`.
                package var perfPowerMetrics: Components.Schemas.App.relationshipsPayload.perfPowerMetricsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages`.
                package struct appCustomProductPagesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appCustomProductPages = "appCustomProductPages"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.appCustomProductPagesPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.appCustomProductPagesPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.appCustomProductPagesPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.appCustomProductPagesPayload.dataPayload?
                    /// Creates a new `appCustomProductPagesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.appCustomProductPagesPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages`.
                package var appCustomProductPages: Components.Schemas.App.relationshipsPayload.appCustomProductPagesPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2`.
                package struct inAppPurchasesV2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case inAppPurchases = "inAppPurchases"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.inAppPurchasesV2Payload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.inAppPurchasesV2Payload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.inAppPurchasesV2Payload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.inAppPurchasesV2Payload.dataPayload?
                    /// Creates a new `inAppPurchasesV2Payload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.inAppPurchasesV2Payload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2`.
                package var inAppPurchasesV2: Components.Schemas.App.relationshipsPayload.inAppPurchasesV2Payload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases`.
                package struct promotedPurchasesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case promotedPurchases = "promotedPurchases"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.promotedPurchasesPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.promotedPurchasesPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.promotedPurchasesPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.promotedPurchasesPayload.dataPayload?
                    /// Creates a new `promotedPurchasesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.promotedPurchasesPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases`.
                package var promotedPurchases: Components.Schemas.App.relationshipsPayload.promotedPurchasesPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents`.
                package struct appEventsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appEvents = "appEvents"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.appEventsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.appEventsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.appEventsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.appEventsPayload.dataPayload?
                    /// Creates a new `appEventsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.appEventsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents`.
                package var appEvents: Components.Schemas.App.relationshipsPayload.appEventsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions`.
                package struct reviewSubmissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case reviewSubmissions = "reviewSubmissions"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.reviewSubmissionsPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.reviewSubmissionsPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.reviewSubmissionsPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.reviewSubmissionsPayload.dataPayload?
                    /// Creates a new `reviewSubmissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.reviewSubmissionsPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions`.
                package var reviewSubmissions: Components.Schemas.App.relationshipsPayload.reviewSubmissionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod`.
                package struct subscriptionGracePeriodPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data`.
                    package struct dataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case subscriptionGracePeriods = "subscriptionGracePeriods"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.subscriptionGracePeriodPayload.dataPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.subscriptionGracePeriodPayload.dataPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.subscriptionGracePeriodPayload.dataPayload?
                    /// Creates a new `subscriptionGracePeriodPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.relationshipsPayload.subscriptionGracePeriodPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod`.
                package var subscriptionGracePeriod: Components.Schemas.App.relationshipsPayload.subscriptionGracePeriodPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviews`.
                package struct customerReviewsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviews/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `customerReviewsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviews`.
                package var customerReviews: Components.Schemas.App.relationshipsPayload.customerReviewsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail`.
                package struct gameCenterDetailPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data`.
                    package struct dataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case gameCenterDetails = "gameCenterDetails"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.gameCenterDetailPayload.dataPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.gameCenterDetailPayload.dataPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.gameCenterDetailPayload.dataPayload?
                    /// Creates a new `gameCenterDetailPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.relationshipsPayload.gameCenterDetailPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail`.
                package var gameCenterDetail: Components.Schemas.App.relationshipsPayload.gameCenterDetailPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2`.
                package struct appStoreVersionExperimentsV2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appStoreVersionExperiments = "appStoreVersionExperiments"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/dataPayload/type`.
                        package var _type: Components.Schemas.App.relationshipsPayload.appStoreVersionExperimentsV2Payload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.App.relationshipsPayload.appStoreVersionExperimentsV2Payload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/data`.
                    package typealias dataPayload = [Components.Schemas.App.relationshipsPayload.appStoreVersionExperimentsV2Payload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/data`.
                    package var data: Components.Schemas.App.relationshipsPayload.appStoreVersionExperimentsV2Payload.dataPayload?
                    /// Creates a new `appStoreVersionExperimentsV2Payload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.relationshipsPayload.appStoreVersionExperimentsV2Payload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2`.
                package var appStoreVersionExperimentsV2: Components.Schemas.App.relationshipsPayload.appStoreVersionExperimentsV2Payload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/alternativeDistributionKey`.
                package struct alternativeDistributionKeyPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/alternativeDistributionKey/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `alternativeDistributionKeyPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/alternativeDistributionKey`.
                package var alternativeDistributionKey: Components.Schemas.App.relationshipsPayload.alternativeDistributionKeyPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/analyticsReportRequests`.
                package struct analyticsReportRequestsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/analyticsReportRequests/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `analyticsReportRequestsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/analyticsReportRequests`.
                package var analyticsReportRequests: Components.Schemas.App.relationshipsPayload.analyticsReportRequestsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/marketplaceSearchDetail`.
                package struct marketplaceSearchDetailPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/marketplaceSearchDetail/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `marketplaceSearchDetailPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    package init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/marketplaceSearchDetail`.
                package var marketplaceSearchDetail: Components.Schemas.App.relationshipsPayload.marketplaceSearchDetailPayload?
                /// Creates a new `relationshipsPayload`.
                ///
                /// - Parameters:
                ///   - appEncryptionDeclarations:
                ///   - ciProduct:
                ///   - betaTesters:
                ///   - betaGroups:
                ///   - appStoreVersions:
                ///   - preReleaseVersions:
                ///   - betaAppLocalizations:
                ///   - builds:
                ///   - betaLicenseAgreement:
                ///   - betaAppReviewDetail:
                ///   - appInfos:
                ///   - appClips:
                ///   - appPricePoints:
                ///   - endUserLicenseAgreement:
                ///   - appPriceSchedule:
                ///   - appAvailabilityV2:
                ///   - inAppPurchases:
                ///   - subscriptionGroups:
                ///   - gameCenterEnabledVersions:
                ///   - perfPowerMetrics:
                ///   - appCustomProductPages:
                ///   - inAppPurchasesV2:
                ///   - promotedPurchases:
                ///   - appEvents:
                ///   - reviewSubmissions:
                ///   - subscriptionGracePeriod:
                ///   - customerReviews:
                ///   - gameCenterDetail:
                ///   - appStoreVersionExperimentsV2:
                ///   - alternativeDistributionKey:
                ///   - analyticsReportRequests:
                ///   - marketplaceSearchDetail:
                package init(
                    appEncryptionDeclarations: Components.Schemas.App.relationshipsPayload.appEncryptionDeclarationsPayload? = nil,
                    ciProduct: Components.Schemas.App.relationshipsPayload.ciProductPayload? = nil,
                    betaTesters: Components.Schemas.App.relationshipsPayload.betaTestersPayload? = nil,
                    betaGroups: Components.Schemas.App.relationshipsPayload.betaGroupsPayload? = nil,
                    appStoreVersions: Components.Schemas.App.relationshipsPayload.appStoreVersionsPayload? = nil,
                    preReleaseVersions: Components.Schemas.App.relationshipsPayload.preReleaseVersionsPayload? = nil,
                    betaAppLocalizations: Components.Schemas.App.relationshipsPayload.betaAppLocalizationsPayload? = nil,
                    builds: Components.Schemas.App.relationshipsPayload.buildsPayload? = nil,
                    betaLicenseAgreement: Components.Schemas.App.relationshipsPayload.betaLicenseAgreementPayload? = nil,
                    betaAppReviewDetail: Components.Schemas.App.relationshipsPayload.betaAppReviewDetailPayload? = nil,
                    appInfos: Components.Schemas.App.relationshipsPayload.appInfosPayload? = nil,
                    appClips: Components.Schemas.App.relationshipsPayload.appClipsPayload? = nil,
                    appPricePoints: Components.Schemas.App.relationshipsPayload.appPricePointsPayload? = nil,
                    endUserLicenseAgreement: Components.Schemas.App.relationshipsPayload.endUserLicenseAgreementPayload? = nil,
                    appPriceSchedule: Components.Schemas.App.relationshipsPayload.appPriceSchedulePayload? = nil,
                    appAvailabilityV2: Components.Schemas.App.relationshipsPayload.appAvailabilityV2Payload? = nil,
                    inAppPurchases: Components.Schemas.App.relationshipsPayload.inAppPurchasesPayload? = nil,
                    subscriptionGroups: Components.Schemas.App.relationshipsPayload.subscriptionGroupsPayload? = nil,
                    gameCenterEnabledVersions: Components.Schemas.App.relationshipsPayload.gameCenterEnabledVersionsPayload? = nil,
                    perfPowerMetrics: Components.Schemas.App.relationshipsPayload.perfPowerMetricsPayload? = nil,
                    appCustomProductPages: Components.Schemas.App.relationshipsPayload.appCustomProductPagesPayload? = nil,
                    inAppPurchasesV2: Components.Schemas.App.relationshipsPayload.inAppPurchasesV2Payload? = nil,
                    promotedPurchases: Components.Schemas.App.relationshipsPayload.promotedPurchasesPayload? = nil,
                    appEvents: Components.Schemas.App.relationshipsPayload.appEventsPayload? = nil,
                    reviewSubmissions: Components.Schemas.App.relationshipsPayload.reviewSubmissionsPayload? = nil,
                    subscriptionGracePeriod: Components.Schemas.App.relationshipsPayload.subscriptionGracePeriodPayload? = nil,
                    customerReviews: Components.Schemas.App.relationshipsPayload.customerReviewsPayload? = nil,
                    gameCenterDetail: Components.Schemas.App.relationshipsPayload.gameCenterDetailPayload? = nil,
                    appStoreVersionExperimentsV2: Components.Schemas.App.relationshipsPayload.appStoreVersionExperimentsV2Payload? = nil,
                    alternativeDistributionKey: Components.Schemas.App.relationshipsPayload.alternativeDistributionKeyPayload? = nil,
                    analyticsReportRequests: Components.Schemas.App.relationshipsPayload.analyticsReportRequestsPayload? = nil,
                    marketplaceSearchDetail: Components.Schemas.App.relationshipsPayload.marketplaceSearchDetailPayload? = nil
                ) {
                    self.appEncryptionDeclarations = appEncryptionDeclarations
                    self.ciProduct = ciProduct
                    self.betaTesters = betaTesters
                    self.betaGroups = betaGroups
                    self.appStoreVersions = appStoreVersions
                    self.preReleaseVersions = preReleaseVersions
                    self.betaAppLocalizations = betaAppLocalizations
                    self.builds = builds
                    self.betaLicenseAgreement = betaLicenseAgreement
                    self.betaAppReviewDetail = betaAppReviewDetail
                    self.appInfos = appInfos
                    self.appClips = appClips
                    self.appPricePoints = appPricePoints
                    self.endUserLicenseAgreement = endUserLicenseAgreement
                    self.appPriceSchedule = appPriceSchedule
                    self.appAvailabilityV2 = appAvailabilityV2
                    self.inAppPurchases = inAppPurchases
                    self.subscriptionGroups = subscriptionGroups
                    self.gameCenterEnabledVersions = gameCenterEnabledVersions
                    self.perfPowerMetrics = perfPowerMetrics
                    self.appCustomProductPages = appCustomProductPages
                    self.inAppPurchasesV2 = inAppPurchasesV2
                    self.promotedPurchases = promotedPurchases
                    self.appEvents = appEvents
                    self.reviewSubmissions = reviewSubmissions
                    self.subscriptionGracePeriod = subscriptionGracePeriod
                    self.customerReviews = customerReviews
                    self.gameCenterDetail = gameCenterDetail
                    self.appStoreVersionExperimentsV2 = appStoreVersionExperimentsV2
                    self.alternativeDistributionKey = alternativeDistributionKey
                    self.analyticsReportRequests = analyticsReportRequests
                    self.marketplaceSearchDetail = marketplaceSearchDetail
                }
                package enum CodingKeys: String, CodingKey {
                    case appEncryptionDeclarations
                    case ciProduct
                    case betaTesters
                    case betaGroups
                    case appStoreVersions
                    case preReleaseVersions
                    case betaAppLocalizations
                    case builds
                    case betaLicenseAgreement
                    case betaAppReviewDetail
                    case appInfos
                    case appClips
                    case appPricePoints
                    case endUserLicenseAgreement
                    case appPriceSchedule
                    case appAvailabilityV2
                    case inAppPurchases
                    case subscriptionGroups
                    case gameCenterEnabledVersions
                    case perfPowerMetrics
                    case appCustomProductPages
                    case inAppPurchasesV2
                    case promotedPurchases
                    case appEvents
                    case reviewSubmissions
                    case subscriptionGracePeriod
                    case customerReviews
                    case gameCenterDetail
                    case appStoreVersionExperimentsV2
                    case alternativeDistributionKey
                    case analyticsReportRequests
                    case marketplaceSearchDetail
                }
            }
            /// - Remark: Generated from `#/components/schemas/App/relationships`.
            package var relationships: Components.Schemas.App.relationshipsPayload?
            /// - Remark: Generated from `#/components/schemas/App/links`.
            package var links: Components.Schemas.ResourceLinks?
            /// Creates a new `App`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - relationships:
            ///   - links:
            package init(
                _type: Components.Schemas.App._typePayload,
                id: Swift.String,
                attributes: Components.Schemas.App.attributesPayload? = nil,
                relationships: Components.Schemas.App.relationshipsPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.relationships = relationships
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case relationships
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapability`.
        package struct BundleIdCapability: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/type`.
            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bundleIdCapabilities = "bundleIdCapabilities"
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/type`.
            package var _type: Components.Schemas.BundleIdCapability._typePayload
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/id`.
            package var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/attributes`.
            package struct attributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdCapability/attributes/capabilityType`.
                package var capabilityType: Components.Schemas.CapabilityType?
                /// - Remark: Generated from `#/components/schemas/BundleIdCapability/attributes/settings`.
                package var settings: [Components.Schemas.CapabilitySetting]?
                /// Creates a new `attributesPayload`.
                ///
                /// - Parameters:
                ///   - capabilityType:
                ///   - settings:
                package init(
                    capabilityType: Components.Schemas.CapabilityType? = nil,
                    settings: [Components.Schemas.CapabilitySetting]? = nil
                ) {
                    self.capabilityType = capabilityType
                    self.settings = settings
                }
                package enum CodingKeys: String, CodingKey {
                    case capabilityType
                    case settings
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/attributes`.
            package var attributes: Components.Schemas.BundleIdCapability.attributesPayload?
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/links`.
            package var links: Components.Schemas.ResourceLinks?
            /// Creates a new `BundleIdCapability`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - links:
            package init(
                _type: Components.Schemas.BundleIdCapability._typePayload,
                id: Swift.String,
                attributes: Components.Schemas.BundleIdCapability.attributesPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityResponse`.
        package struct BundleIdCapabilityResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityResponse/data`.
            package var data: Components.Schemas.BundleIdCapability
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityResponse/links`.
            package var links: Components.Schemas.DocumentLinks
            /// Creates a new `BundleIdCapabilityResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            package init(
                data: Components.Schemas.BundleIdCapability,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest`.
        package struct BundleIdCapabilityCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data`.
            package struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIdCapabilities = "bundleIdCapabilities"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/type`.
                package var _type: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/attributes`.
                package struct attributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/attributes/capabilityType`.
                    package var capabilityType: Components.Schemas.CapabilityType
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/attributes/settings`.
                    package var settings: [Components.Schemas.CapabilitySetting]?
                    /// Creates a new `attributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - capabilityType:
                    ///   - settings:
                    package init(
                        capabilityType: Components.Schemas.CapabilityType,
                        settings: [Components.Schemas.CapabilitySetting]? = nil
                    ) {
                        self.capabilityType = capabilityType
                        self.settings = settings
                    }
                    package enum CodingKeys: String, CodingKey {
                        case capabilityType
                        case settings
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/attributes`.
                package var attributes: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.attributesPayload
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships`.
                package struct relationshipsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId`.
                    package struct bundleIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data`.
                        package struct dataPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data/type`.
                            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bundleIds = "bundleIds"
                            }
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data/type`.
                            package var _type: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload.dataPayload._typePayload
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data/id`.
                            package var id: Swift.String
                            /// Creates a new `dataPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            package init(
                                _type: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload.dataPayload._typePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            package enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data`.
                        package var data: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload.dataPayload
                        /// Creates a new `bundleIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        package init(data: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload.dataPayload) {
                            self.data = data
                        }
                        package enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId`.
                    package var bundleId: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload
                    /// Creates a new `relationshipsPayload`.
                    ///
                    /// - Parameters:
                    ///   - bundleId:
                    package init(bundleId: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload) {
                        self.bundleId = bundleId
                    }
                    package enum CodingKeys: String, CodingKey {
                        case bundleId
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships`.
                package var relationships: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.relationshipsPayload
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                ///   - relationships:
                package init(
                    _type: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload._typePayload,
                    attributes: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.attributesPayload,
                    relationships: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload.relationshipsPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                    self.relationships = relationships
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                    case relationships
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data`.
            package var data: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload
            /// Creates a new `BundleIdCapabilityCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            package init(data: Components.Schemas.BundleIdCapabilityCreateRequest.dataPayload) {
                self.data = data
            }
            package enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest`.
        package struct BundleIdCapabilityUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data`.
            package struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIdCapabilities = "bundleIdCapabilities"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/type`.
                package var _type: Components.Schemas.BundleIdCapabilityUpdateRequest.dataPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/id`.
                package var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/attributes`.
                package struct attributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/attributes/capabilityType`.
                    package var capabilityType: Components.Schemas.CapabilityType?
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/attributes/settings`.
                    package var settings: [Components.Schemas.CapabilitySetting]?
                    /// Creates a new `attributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - capabilityType:
                    ///   - settings:
                    package init(
                        capabilityType: Components.Schemas.CapabilityType? = nil,
                        settings: [Components.Schemas.CapabilitySetting]? = nil
                    ) {
                        self.capabilityType = capabilityType
                        self.settings = settings
                    }
                    package enum CodingKeys: String, CodingKey {
                        case capabilityType
                        case settings
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/attributes`.
                package var attributes: Components.Schemas.BundleIdCapabilityUpdateRequest.dataPayload.attributesPayload?
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                ///   - attributes:
                package init(
                    _type: Components.Schemas.BundleIdCapabilityUpdateRequest.dataPayload._typePayload,
                    id: Swift.String,
                    attributes: Components.Schemas.BundleIdCapabilityUpdateRequest.dataPayload.attributesPayload? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.attributes = attributes
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data`.
            package var data: Components.Schemas.BundleIdCapabilityUpdateRequest.dataPayload
            /// Creates a new `BundleIdCapabilityUpdateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            package init(data: Components.Schemas.BundleIdCapabilityUpdateRequest.dataPayload) {
                self.data = data
            }
            package enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleId`.
        package struct BundleId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleId/type`.
            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bundleIds = "bundleIds"
            }
            /// - Remark: Generated from `#/components/schemas/BundleId/type`.
            package var _type: Components.Schemas.BundleId._typePayload
            /// - Remark: Generated from `#/components/schemas/BundleId/id`.
            package var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BundleId/attributes`.
            package struct attributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleId/attributes/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BundleId/attributes/platform`.
                package var platform: Components.Schemas.BundleIdPlatform?
                /// - Remark: Generated from `#/components/schemas/BundleId/attributes/identifier`.
                package var identifier: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BundleId/attributes/seedId`.
                package var seedId: Swift.String?
                /// Creates a new `attributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - platform:
                ///   - identifier:
                ///   - seedId:
                package init(
                    name: Swift.String? = nil,
                    platform: Components.Schemas.BundleIdPlatform? = nil,
                    identifier: Swift.String? = nil,
                    seedId: Swift.String? = nil
                ) {
                    self.name = name
                    self.platform = platform
                    self.identifier = identifier
                    self.seedId = seedId
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case platform
                    case identifier
                    case seedId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleId/attributes`.
            package var attributes: Components.Schemas.BundleId.attributesPayload?
            /// - Remark: Generated from `#/components/schemas/BundleId/relationships`.
            package struct relationshipsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles`.
                package struct profilesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case profiles = "profiles"
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/dataPayload/type`.
                        package var _type: Components.Schemas.BundleId.relationshipsPayload.profilesPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.BundleId.relationshipsPayload.profilesPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/data`.
                    package typealias dataPayload = [Components.Schemas.BundleId.relationshipsPayload.profilesPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/data`.
                    package var data: Components.Schemas.BundleId.relationshipsPayload.profilesPayload.dataPayload?
                    /// Creates a new `profilesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.BundleId.relationshipsPayload.profilesPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles`.
                package var profiles: Components.Schemas.BundleId.relationshipsPayload.profilesPayload?
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities`.
                package struct bundleIdCapabilitiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bundleIdCapabilities = "bundleIdCapabilities"
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/dataPayload/type`.
                        package var _type: Components.Schemas.BundleId.relationshipsPayload.bundleIdCapabilitiesPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.BundleId.relationshipsPayload.bundleIdCapabilitiesPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/data`.
                    package typealias dataPayload = [Components.Schemas.BundleId.relationshipsPayload.bundleIdCapabilitiesPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/data`.
                    package var data: Components.Schemas.BundleId.relationshipsPayload.bundleIdCapabilitiesPayload.dataPayload?
                    /// Creates a new `bundleIdCapabilitiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.BundleId.relationshipsPayload.bundleIdCapabilitiesPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities`.
                package var bundleIdCapabilities: Components.Schemas.BundleId.relationshipsPayload.bundleIdCapabilitiesPayload?
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app`.
                package struct appPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data`.
                    package struct dataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case apps = "apps"
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data/type`.
                        package var _type: Components.Schemas.BundleId.relationshipsPayload.appPayload.dataPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.BundleId.relationshipsPayload.appPayload.dataPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data`.
                    package var data: Components.Schemas.BundleId.relationshipsPayload.appPayload.dataPayload?
                    /// Creates a new `appPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.BundleId.relationshipsPayload.appPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app`.
                package var app: Components.Schemas.BundleId.relationshipsPayload.appPayload?
                /// Creates a new `relationshipsPayload`.
                ///
                /// - Parameters:
                ///   - profiles:
                ///   - bundleIdCapabilities:
                ///   - app:
                package init(
                    profiles: Components.Schemas.BundleId.relationshipsPayload.profilesPayload? = nil,
                    bundleIdCapabilities: Components.Schemas.BundleId.relationshipsPayload.bundleIdCapabilitiesPayload? = nil,
                    app: Components.Schemas.BundleId.relationshipsPayload.appPayload? = nil
                ) {
                    self.profiles = profiles
                    self.bundleIdCapabilities = bundleIdCapabilities
                    self.app = app
                }
                package enum CodingKeys: String, CodingKey {
                    case profiles
                    case bundleIdCapabilities
                    case app
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleId/relationships`.
            package var relationships: Components.Schemas.BundleId.relationshipsPayload?
            /// - Remark: Generated from `#/components/schemas/BundleId/links`.
            package var links: Components.Schemas.ResourceLinks?
            /// Creates a new `BundleId`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - relationships:
            ///   - links:
            package init(
                _type: Components.Schemas.BundleId._typePayload,
                id: Swift.String,
                attributes: Components.Schemas.BundleId.attributesPayload? = nil,
                relationships: Components.Schemas.BundleId.relationshipsPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.relationships = relationships
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case relationships
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdsResponse`.
        package struct BundleIdsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/data`.
            package var data: [Components.Schemas.BundleId]
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/includedPayload`.
            @frozen package enum includedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/includedPayload/case1`.
                case Profile(Components.Schemas.Profile)
                /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/includedPayload/case2`.
                case BundleIdCapability(Components.Schemas.BundleIdCapability)
                /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/includedPayload/case3`.
                case App(Components.Schemas.App)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Profile(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .BundleIdCapability(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .App(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Profile(value):
                        try value.encode(to: encoder)
                    case let .BundleIdCapability(value):
                        try value.encode(to: encoder)
                    case let .App(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/included`.
            package typealias includedPayload = [Components.Schemas.BundleIdsResponse.includedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/included`.
            package var included: Components.Schemas.BundleIdsResponse.includedPayload?
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/links`.
            package var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/meta`.
            package var meta: Components.Schemas.PagingInformation?
            /// Creates a new `BundleIdsResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            ///   - meta:
            package init(
                data: [Components.Schemas.BundleId],
                included: Components.Schemas.BundleIdsResponse.includedPayload? = nil,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.included = included
                self.links = links
                self.meta = meta
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdResponse`.
        package struct BundleIdResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/data`.
            package var data: Components.Schemas.BundleId
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/includedPayload`.
            @frozen package enum includedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdResponse/includedPayload/case1`.
                case Profile(Components.Schemas.Profile)
                /// - Remark: Generated from `#/components/schemas/BundleIdResponse/includedPayload/case2`.
                case BundleIdCapability(Components.Schemas.BundleIdCapability)
                /// - Remark: Generated from `#/components/schemas/BundleIdResponse/includedPayload/case3`.
                case App(Components.Schemas.App)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Profile(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .BundleIdCapability(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .App(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Profile(value):
                        try value.encode(to: encoder)
                    case let .BundleIdCapability(value):
                        try value.encode(to: encoder)
                    case let .App(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/included`.
            package typealias includedPayload = [Components.Schemas.BundleIdResponse.includedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/included`.
            package var included: Components.Schemas.BundleIdResponse.includedPayload?
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/links`.
            package var links: Components.Schemas.DocumentLinks
            /// Creates a new `BundleIdResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            package init(
                data: Components.Schemas.BundleId,
                included: Components.Schemas.BundleIdResponse.includedPayload? = nil,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.included = included
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest`.
        package struct BundleIdCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data`.
            package struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIds = "bundleIds"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/type`.
                package var _type: Components.Schemas.BundleIdCreateRequest.dataPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes`.
                package struct attributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes/name`.
                    package var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes/platform`.
                    package var platform: Components.Schemas.BundleIdPlatform
                    /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes/identifier`.
                    package var identifier: Swift.String
                    /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes/seedId`.
                    package var seedId: Swift.String?
                    /// Creates a new `attributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - platform:
                    ///   - identifier:
                    ///   - seedId:
                    package init(
                        name: Swift.String,
                        platform: Components.Schemas.BundleIdPlatform,
                        identifier: Swift.String,
                        seedId: Swift.String? = nil
                    ) {
                        self.name = name
                        self.platform = platform
                        self.identifier = identifier
                        self.seedId = seedId
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                        case platform
                        case identifier
                        case seedId
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes`.
                package var attributes: Components.Schemas.BundleIdCreateRequest.dataPayload.attributesPayload
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                package init(
                    _type: Components.Schemas.BundleIdCreateRequest.dataPayload._typePayload,
                    attributes: Components.Schemas.BundleIdCreateRequest.dataPayload.attributesPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data`.
            package var data: Components.Schemas.BundleIdCreateRequest.dataPayload
            /// Creates a new `BundleIdCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            package init(data: Components.Schemas.BundleIdCreateRequest.dataPayload) {
                self.data = data
            }
            package enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest`.
        package struct BundleIdUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data`.
            package struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIds = "bundleIds"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/type`.
                package var _type: Components.Schemas.BundleIdUpdateRequest.dataPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/id`.
                package var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/attributes`.
                package struct attributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/attributes/name`.
                    package var name: Swift.String?
                    /// Creates a new `attributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    package init(name: Swift.String? = nil) {
                        self.name = name
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/attributes`.
                package var attributes: Components.Schemas.BundleIdUpdateRequest.dataPayload.attributesPayload?
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                ///   - attributes:
                package init(
                    _type: Components.Schemas.BundleIdUpdateRequest.dataPayload._typePayload,
                    id: Swift.String,
                    attributes: Components.Schemas.BundleIdUpdateRequest.dataPayload.attributesPayload? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.attributes = attributes
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data`.
            package var data: Components.Schemas.BundleIdUpdateRequest.dataPayload
            /// Creates a new `BundleIdUpdateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            package init(data: Components.Schemas.BundleIdUpdateRequest.dataPayload) {
                self.data = data
            }
            package enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/Certificate`.
        package struct Certificate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Certificate/type`.
            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case certificates = "certificates"
            }
            /// - Remark: Generated from `#/components/schemas/Certificate/type`.
            package var _type: Components.Schemas.Certificate._typePayload
            /// - Remark: Generated from `#/components/schemas/Certificate/id`.
            package var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Certificate/attributes`.
            package struct attributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/certificateType`.
                package var certificateType: Components.Schemas.CertificateType?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/displayName`.
                package var displayName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/serialNumber`.
                package var serialNumber: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/platform`.
                package var platform: Components.Schemas.BundleIdPlatform?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/expirationDate`.
                package var expirationDate: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/certificateContent`.
                package var certificateContent: Swift.String?
                /// Creates a new `attributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - certificateType:
                ///   - displayName:
                ///   - serialNumber:
                ///   - platform:
                ///   - expirationDate:
                ///   - certificateContent:
                package init(
                    name: Swift.String? = nil,
                    certificateType: Components.Schemas.CertificateType? = nil,
                    displayName: Swift.String? = nil,
                    serialNumber: Swift.String? = nil,
                    platform: Components.Schemas.BundleIdPlatform? = nil,
                    expirationDate: Foundation.Date? = nil,
                    certificateContent: Swift.String? = nil
                ) {
                    self.name = name
                    self.certificateType = certificateType
                    self.displayName = displayName
                    self.serialNumber = serialNumber
                    self.platform = platform
                    self.expirationDate = expirationDate
                    self.certificateContent = certificateContent
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case certificateType
                    case displayName
                    case serialNumber
                    case platform
                    case expirationDate
                    case certificateContent
                }
            }
            /// - Remark: Generated from `#/components/schemas/Certificate/attributes`.
            package var attributes: Components.Schemas.Certificate.attributesPayload?
            /// - Remark: Generated from `#/components/schemas/Certificate/links`.
            package var links: Components.Schemas.ResourceLinks?
            /// Creates a new `Certificate`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - links:
            package init(
                _type: Components.Schemas.Certificate._typePayload,
                id: Swift.String,
                attributes: Components.Schemas.Certificate.attributesPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificatesResponse`.
        package struct CertificatesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificatesResponse/data`.
            package var data: [Components.Schemas.Certificate]
            /// - Remark: Generated from `#/components/schemas/CertificatesResponse/links`.
            package var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/CertificatesResponse/meta`.
            package var meta: Components.Schemas.PagingInformation?
            /// Creates a new `CertificatesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            package init(
                data: [Components.Schemas.Certificate],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificateResponse`.
        package struct CertificateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificateResponse/data`.
            package var data: Components.Schemas.Certificate
            /// - Remark: Generated from `#/components/schemas/CertificateResponse/links`.
            package var links: Components.Schemas.DocumentLinks
            /// Creates a new `CertificateResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            package init(
                data: Components.Schemas.Certificate,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest`.
        package struct CertificateCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data`.
            package struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/type`.
                package var _type: Components.Schemas.CertificateCreateRequest.dataPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/attributes`.
                package struct attributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/attributes/csrContent`.
                    package var csrContent: Swift.String
                    /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/attributes/certificateType`.
                    package var certificateType: Components.Schemas.CertificateType
                    /// Creates a new `attributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - csrContent:
                    ///   - certificateType:
                    package init(
                        csrContent: Swift.String,
                        certificateType: Components.Schemas.CertificateType
                    ) {
                        self.csrContent = csrContent
                        self.certificateType = certificateType
                    }
                    package enum CodingKeys: String, CodingKey {
                        case csrContent
                        case certificateType
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/attributes`.
                package var attributes: Components.Schemas.CertificateCreateRequest.dataPayload.attributesPayload
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                package init(
                    _type: Components.Schemas.CertificateCreateRequest.dataPayload._typePayload,
                    attributes: Components.Schemas.CertificateCreateRequest.dataPayload.attributesPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data`.
            package var data: Components.Schemas.CertificateCreateRequest.dataPayload
            /// Creates a new `CertificateCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            package init(data: Components.Schemas.CertificateCreateRequest.dataPayload) {
                self.data = data
            }
            package enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/Device`.
        package struct Device: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Device/type`.
            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case devices = "devices"
            }
            /// - Remark: Generated from `#/components/schemas/Device/type`.
            package var _type: Components.Schemas.Device._typePayload
            /// - Remark: Generated from `#/components/schemas/Device/id`.
            package var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Device/attributes`.
            package struct attributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Device/attributes/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/platform`.
                package var platform: Components.Schemas.BundleIdPlatform?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/udid`.
                package var udid: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/deviceClass`.
                @frozen package enum deviceClassPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case APPLE_WATCH = "APPLE_WATCH"
                    case IPAD = "IPAD"
                    case IPHONE = "IPHONE"
                    case IPOD = "IPOD"
                    case APPLE_TV = "APPLE_TV"
                    case MAC = "MAC"
                }
                /// - Remark: Generated from `#/components/schemas/Device/attributes/deviceClass`.
                package var deviceClass: Components.Schemas.Device.attributesPayload.deviceClassPayload?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/status`.
                @frozen package enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ENABLED = "ENABLED"
                    case DISABLED = "DISABLED"
                }
                /// - Remark: Generated from `#/components/schemas/Device/attributes/status`.
                package var status: Components.Schemas.Device.attributesPayload.statusPayload?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/model`.
                package var model: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/addedDate`.
                package var addedDate: Foundation.Date?
                /// Creates a new `attributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - platform:
                ///   - udid:
                ///   - deviceClass:
                ///   - status:
                ///   - model:
                ///   - addedDate:
                package init(
                    name: Swift.String? = nil,
                    platform: Components.Schemas.BundleIdPlatform? = nil,
                    udid: Swift.String? = nil,
                    deviceClass: Components.Schemas.Device.attributesPayload.deviceClassPayload? = nil,
                    status: Components.Schemas.Device.attributesPayload.statusPayload? = nil,
                    model: Swift.String? = nil,
                    addedDate: Foundation.Date? = nil
                ) {
                    self.name = name
                    self.platform = platform
                    self.udid = udid
                    self.deviceClass = deviceClass
                    self.status = status
                    self.model = model
                    self.addedDate = addedDate
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case platform
                    case udid
                    case deviceClass
                    case status
                    case model
                    case addedDate
                }
            }
            /// - Remark: Generated from `#/components/schemas/Device/attributes`.
            package var attributes: Components.Schemas.Device.attributesPayload?
            /// - Remark: Generated from `#/components/schemas/Device/links`.
            package var links: Components.Schemas.ResourceLinks?
            /// Creates a new `Device`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - links:
            package init(
                _type: Components.Schemas.Device._typePayload,
                id: Swift.String,
                attributes: Components.Schemas.Device.attributesPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/DevicesResponse`.
        package struct DevicesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DevicesResponse/data`.
            package var data: [Components.Schemas.Device]
            /// - Remark: Generated from `#/components/schemas/DevicesResponse/links`.
            package var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/DevicesResponse/meta`.
            package var meta: Components.Schemas.PagingInformation?
            /// Creates a new `DevicesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            package init(
                data: [Components.Schemas.Device],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeviceResponse`.
        package struct DeviceResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceResponse/data`.
            package var data: Components.Schemas.Device
            /// - Remark: Generated from `#/components/schemas/DeviceResponse/links`.
            package var links: Components.Schemas.DocumentLinks
            /// Creates a new `DeviceResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            package init(
                data: Components.Schemas.Device,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest`.
        package struct DeviceCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data`.
            package struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case devices = "devices"
                }
                /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/type`.
                package var _type: Components.Schemas.DeviceCreateRequest.dataPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes`.
                package struct attributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes/name`.
                    package var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes/platform`.
                    package var platform: Components.Schemas.BundleIdPlatform
                    /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes/udid`.
                    package var udid: Swift.String
                    /// Creates a new `attributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - platform:
                    ///   - udid:
                    package init(
                        name: Swift.String,
                        platform: Components.Schemas.BundleIdPlatform,
                        udid: Swift.String
                    ) {
                        self.name = name
                        self.platform = platform
                        self.udid = udid
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                        case platform
                        case udid
                    }
                }
                /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes`.
                package var attributes: Components.Schemas.DeviceCreateRequest.dataPayload.attributesPayload
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                package init(
                    _type: Components.Schemas.DeviceCreateRequest.dataPayload._typePayload,
                    attributes: Components.Schemas.DeviceCreateRequest.dataPayload.attributesPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data`.
            package var data: Components.Schemas.DeviceCreateRequest.dataPayload
            /// Creates a new `DeviceCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            package init(data: Components.Schemas.DeviceCreateRequest.dataPayload) {
                self.data = data
            }
            package enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest`.
        package struct DeviceUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data`.
            package struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case devices = "devices"
                }
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/type`.
                package var _type: Components.Schemas.DeviceUpdateRequest.dataPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/id`.
                package var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes`.
                package struct attributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/name`.
                    package var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/status`.
                    @frozen package enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case ENABLED = "ENABLED"
                        case DISABLED = "DISABLED"
                    }
                    /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/status`.
                    package var status: Components.Schemas.DeviceUpdateRequest.dataPayload.attributesPayload.statusPayload?
                    /// Creates a new `attributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - status:
                    package init(
                        name: Swift.String? = nil,
                        status: Components.Schemas.DeviceUpdateRequest.dataPayload.attributesPayload.statusPayload? = nil
                    ) {
                        self.name = name
                        self.status = status
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                        case status
                    }
                }
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes`.
                package var attributes: Components.Schemas.DeviceUpdateRequest.dataPayload.attributesPayload?
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                ///   - attributes:
                package init(
                    _type: Components.Schemas.DeviceUpdateRequest.dataPayload._typePayload,
                    id: Swift.String,
                    attributes: Components.Schemas.DeviceUpdateRequest.dataPayload.attributesPayload? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.attributes = attributes
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data`.
            package var data: Components.Schemas.DeviceUpdateRequest.dataPayload
            /// Creates a new `DeviceUpdateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            package init(data: Components.Schemas.DeviceUpdateRequest.dataPayload) {
                self.data = data
            }
            package enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/Profile`.
        package struct Profile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Profile/type`.
            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case profiles = "profiles"
            }
            /// - Remark: Generated from `#/components/schemas/Profile/type`.
            package var _type: Components.Schemas.Profile._typePayload
            /// - Remark: Generated from `#/components/schemas/Profile/id`.
            package var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Profile/attributes`.
            package struct attributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/name`.
                package var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/platform`.
                package var platform: Components.Schemas.BundleIdPlatform?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileType`.
                @frozen package enum profileTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case IOS_APP_DEVELOPMENT = "IOS_APP_DEVELOPMENT"
                    case IOS_APP_STORE = "IOS_APP_STORE"
                    case IOS_APP_ADHOC = "IOS_APP_ADHOC"
                    case IOS_APP_INHOUSE = "IOS_APP_INHOUSE"
                    case MAC_APP_DEVELOPMENT = "MAC_APP_DEVELOPMENT"
                    case MAC_APP_STORE = "MAC_APP_STORE"
                    case MAC_APP_DIRECT = "MAC_APP_DIRECT"
                    case TVOS_APP_DEVELOPMENT = "TVOS_APP_DEVELOPMENT"
                    case TVOS_APP_STORE = "TVOS_APP_STORE"
                    case TVOS_APP_ADHOC = "TVOS_APP_ADHOC"
                    case TVOS_APP_INHOUSE = "TVOS_APP_INHOUSE"
                    case MAC_CATALYST_APP_DEVELOPMENT = "MAC_CATALYST_APP_DEVELOPMENT"
                    case MAC_CATALYST_APP_STORE = "MAC_CATALYST_APP_STORE"
                    case MAC_CATALYST_APP_DIRECT = "MAC_CATALYST_APP_DIRECT"
                }
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileType`.
                package var profileType: Components.Schemas.Profile.attributesPayload.profileTypePayload?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileState`.
                @frozen package enum profileStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ACTIVE = "ACTIVE"
                    case INVALID = "INVALID"
                }
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileState`.
                package var profileState: Components.Schemas.Profile.attributesPayload.profileStatePayload?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileContent`.
                package var profileContent: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/uuid`.
                package var uuid: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/createdDate`.
                package var createdDate: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/expirationDate`.
                package var expirationDate: Foundation.Date?
                /// Creates a new `attributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - platform:
                ///   - profileType:
                ///   - profileState:
                ///   - profileContent:
                ///   - uuid:
                ///   - createdDate:
                ///   - expirationDate:
                package init(
                    name: Swift.String? = nil,
                    platform: Components.Schemas.BundleIdPlatform? = nil,
                    profileType: Components.Schemas.Profile.attributesPayload.profileTypePayload? = nil,
                    profileState: Components.Schemas.Profile.attributesPayload.profileStatePayload? = nil,
                    profileContent: Swift.String? = nil,
                    uuid: Swift.String? = nil,
                    createdDate: Foundation.Date? = nil,
                    expirationDate: Foundation.Date? = nil
                ) {
                    self.name = name
                    self.platform = platform
                    self.profileType = profileType
                    self.profileState = profileState
                    self.profileContent = profileContent
                    self.uuid = uuid
                    self.createdDate = createdDate
                    self.expirationDate = expirationDate
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case platform
                    case profileType
                    case profileState
                    case profileContent
                    case uuid
                    case createdDate
                    case expirationDate
                }
            }
            /// - Remark: Generated from `#/components/schemas/Profile/attributes`.
            package var attributes: Components.Schemas.Profile.attributesPayload?
            /// - Remark: Generated from `#/components/schemas/Profile/relationships`.
            package struct relationshipsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId`.
                package struct bundleIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data`.
                    package struct dataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bundleIds = "bundleIds"
                        }
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data/type`.
                        package var _type: Components.Schemas.Profile.relationshipsPayload.bundleIdPayload.dataPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.Profile.relationshipsPayload.bundleIdPayload.dataPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data`.
                    package var data: Components.Schemas.Profile.relationshipsPayload.bundleIdPayload.dataPayload?
                    /// Creates a new `bundleIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.Profile.relationshipsPayload.bundleIdPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId`.
                package var bundleId: Components.Schemas.Profile.relationshipsPayload.bundleIdPayload?
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices`.
                package struct devicesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case devices = "devices"
                        }
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/dataPayload/type`.
                        package var _type: Components.Schemas.Profile.relationshipsPayload.devicesPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.Profile.relationshipsPayload.devicesPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/data`.
                    package typealias dataPayload = [Components.Schemas.Profile.relationshipsPayload.devicesPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/data`.
                    package var data: Components.Schemas.Profile.relationshipsPayload.devicesPayload.dataPayload?
                    /// Creates a new `devicesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.Profile.relationshipsPayload.devicesPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices`.
                package var devices: Components.Schemas.Profile.relationshipsPayload.devicesPayload?
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates`.
                package struct certificatesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/links`.
                    package var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/meta`.
                    package var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/dataPayload`.
                    package struct dataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/dataPayload/type`.
                        @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case certificates = "certificates"
                        }
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/dataPayload/type`.
                        package var _type: Components.Schemas.Profile.relationshipsPayload.certificatesPayload.dataPayloadPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/dataPayload/id`.
                        package var id: Swift.String
                        /// Creates a new `dataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        package init(
                            _type: Components.Schemas.Profile.relationshipsPayload.certificatesPayload.dataPayloadPayload._typePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        package enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/data`.
                    package typealias dataPayload = [Components.Schemas.Profile.relationshipsPayload.certificatesPayload.dataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/data`.
                    package var data: Components.Schemas.Profile.relationshipsPayload.certificatesPayload.dataPayload?
                    /// Creates a new `certificatesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    package init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.Profile.relationshipsPayload.certificatesPayload.dataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    package enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates`.
                package var certificates: Components.Schemas.Profile.relationshipsPayload.certificatesPayload?
                /// Creates a new `relationshipsPayload`.
                ///
                /// - Parameters:
                ///   - bundleId:
                ///   - devices:
                ///   - certificates:
                package init(
                    bundleId: Components.Schemas.Profile.relationshipsPayload.bundleIdPayload? = nil,
                    devices: Components.Schemas.Profile.relationshipsPayload.devicesPayload? = nil,
                    certificates: Components.Schemas.Profile.relationshipsPayload.certificatesPayload? = nil
                ) {
                    self.bundleId = bundleId
                    self.devices = devices
                    self.certificates = certificates
                }
                package enum CodingKeys: String, CodingKey {
                    case bundleId
                    case devices
                    case certificates
                }
            }
            /// - Remark: Generated from `#/components/schemas/Profile/relationships`.
            package var relationships: Components.Schemas.Profile.relationshipsPayload?
            /// - Remark: Generated from `#/components/schemas/Profile/links`.
            package var links: Components.Schemas.ResourceLinks?
            /// Creates a new `Profile`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - relationships:
            ///   - links:
            package init(
                _type: Components.Schemas.Profile._typePayload,
                id: Swift.String,
                attributes: Components.Schemas.Profile.attributesPayload? = nil,
                relationships: Components.Schemas.Profile.relationshipsPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.relationships = relationships
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case relationships
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfilesResponse`.
        package struct ProfilesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/data`.
            package var data: [Components.Schemas.Profile]
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/includedPayload`.
            @frozen package enum includedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfilesResponse/includedPayload/case1`.
                case BundleId(Components.Schemas.BundleId)
                /// - Remark: Generated from `#/components/schemas/ProfilesResponse/includedPayload/case2`.
                case Device(Components.Schemas.Device)
                /// - Remark: Generated from `#/components/schemas/ProfilesResponse/includedPayload/case3`.
                case Certificate(Components.Schemas.Certificate)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .BundleId(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Device(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Certificate(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .BundleId(value):
                        try value.encode(to: encoder)
                    case let .Device(value):
                        try value.encode(to: encoder)
                    case let .Certificate(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/included`.
            package typealias includedPayload = [Components.Schemas.ProfilesResponse.includedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/included`.
            package var included: Components.Schemas.ProfilesResponse.includedPayload?
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/links`.
            package var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/meta`.
            package var meta: Components.Schemas.PagingInformation?
            /// Creates a new `ProfilesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            ///   - meta:
            package init(
                data: [Components.Schemas.Profile],
                included: Components.Schemas.ProfilesResponse.includedPayload? = nil,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.included = included
                self.links = links
                self.meta = meta
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfileResponse`.
        package struct ProfileResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/data`.
            package var data: Components.Schemas.Profile
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/includedPayload`.
            @frozen package enum includedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfileResponse/includedPayload/case1`.
                case BundleId(Components.Schemas.BundleId)
                /// - Remark: Generated from `#/components/schemas/ProfileResponse/includedPayload/case2`.
                case Device(Components.Schemas.Device)
                /// - Remark: Generated from `#/components/schemas/ProfileResponse/includedPayload/case3`.
                case Certificate(Components.Schemas.Certificate)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .BundleId(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Device(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Certificate(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .BundleId(value):
                        try value.encode(to: encoder)
                    case let .Device(value):
                        try value.encode(to: encoder)
                    case let .Certificate(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/included`.
            package typealias includedPayload = [Components.Schemas.ProfileResponse.includedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/included`.
            package var included: Components.Schemas.ProfileResponse.includedPayload?
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/links`.
            package var links: Components.Schemas.DocumentLinks
            /// Creates a new `ProfileResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            package init(
                data: Components.Schemas.Profile,
                included: Components.Schemas.ProfileResponse.includedPayload? = nil,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.included = included
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest`.
        package struct ProfileCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data`.
            package struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/type`.
                @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case profiles = "profiles"
                }
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/type`.
                package var _type: Components.Schemas.ProfileCreateRequest.dataPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes`.
                package struct attributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/name`.
                    package var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/profileType`.
                    @frozen package enum profileTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case IOS_APP_DEVELOPMENT = "IOS_APP_DEVELOPMENT"
                        case IOS_APP_STORE = "IOS_APP_STORE"
                        case IOS_APP_ADHOC = "IOS_APP_ADHOC"
                        case IOS_APP_INHOUSE = "IOS_APP_INHOUSE"
                        case MAC_APP_DEVELOPMENT = "MAC_APP_DEVELOPMENT"
                        case MAC_APP_STORE = "MAC_APP_STORE"
                        case MAC_APP_DIRECT = "MAC_APP_DIRECT"
                        case TVOS_APP_DEVELOPMENT = "TVOS_APP_DEVELOPMENT"
                        case TVOS_APP_STORE = "TVOS_APP_STORE"
                        case TVOS_APP_ADHOC = "TVOS_APP_ADHOC"
                        case TVOS_APP_INHOUSE = "TVOS_APP_INHOUSE"
                        case MAC_CATALYST_APP_DEVELOPMENT = "MAC_CATALYST_APP_DEVELOPMENT"
                        case MAC_CATALYST_APP_STORE = "MAC_CATALYST_APP_STORE"
                        case MAC_CATALYST_APP_DIRECT = "MAC_CATALYST_APP_DIRECT"
                    }
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/profileType`.
                    package var profileType: Components.Schemas.ProfileCreateRequest.dataPayload.attributesPayload.profileTypePayload
                    /// Creates a new `attributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - profileType:
                    package init(
                        name: Swift.String,
                        profileType: Components.Schemas.ProfileCreateRequest.dataPayload.attributesPayload.profileTypePayload
                    ) {
                        self.name = name
                        self.profileType = profileType
                    }
                    package enum CodingKeys: String, CodingKey {
                        case name
                        case profileType
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes`.
                package var attributes: Components.Schemas.ProfileCreateRequest.dataPayload.attributesPayload
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships`.
                package struct relationshipsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId`.
                    package struct bundleIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data`.
                        package struct dataPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data/type`.
                            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bundleIds = "bundleIds"
                            }
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data/type`.
                            package var _type: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload.dataPayload._typePayload
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data/id`.
                            package var id: Swift.String
                            /// Creates a new `dataPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            package init(
                                _type: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload.dataPayload._typePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            package enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data`.
                        package var data: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload.dataPayload
                        /// Creates a new `bundleIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        package init(data: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload.dataPayload) {
                            self.data = data
                        }
                        package enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId`.
                    package var bundleId: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices`.
                    package struct devicesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/dataPayload`.
                        package struct dataPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/dataPayload/type`.
                            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case devices = "devices"
                            }
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/dataPayload/type`.
                            package var _type: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.devicesPayload.dataPayloadPayload._typePayload
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/dataPayload/id`.
                            package var id: Swift.String
                            /// Creates a new `dataPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            package init(
                                _type: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.devicesPayload.dataPayloadPayload._typePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            package enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/data`.
                        package typealias dataPayload = [Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.devicesPayload.dataPayloadPayload]
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/data`.
                        package var data: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.devicesPayload.dataPayload?
                        /// Creates a new `devicesPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        package init(data: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.devicesPayload.dataPayload? = nil) {
                            self.data = data
                        }
                        package enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices`.
                    package var devices: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.devicesPayload?
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates`.
                    package struct certificatesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/dataPayload`.
                        package struct dataPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/dataPayload/type`.
                            @frozen package enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case certificates = "certificates"
                            }
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/dataPayload/type`.
                            package var _type: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.certificatesPayload.dataPayloadPayload._typePayload
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/dataPayload/id`.
                            package var id: Swift.String
                            /// Creates a new `dataPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            package init(
                                _type: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.certificatesPayload.dataPayloadPayload._typePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            package enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/data`.
                        package typealias dataPayload = [Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.certificatesPayload.dataPayloadPayload]
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/data`.
                        package var data: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.certificatesPayload.dataPayload
                        /// Creates a new `certificatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        package init(data: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.certificatesPayload.dataPayload) {
                            self.data = data
                        }
                        package enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates`.
                    package var certificates: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.certificatesPayload
                    /// Creates a new `relationshipsPayload`.
                    ///
                    /// - Parameters:
                    ///   - bundleId:
                    ///   - devices:
                    ///   - certificates:
                    package init(
                        bundleId: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.bundleIdPayload,
                        devices: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.devicesPayload? = nil,
                        certificates: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload.certificatesPayload
                    ) {
                        self.bundleId = bundleId
                        self.devices = devices
                        self.certificates = certificates
                    }
                    package enum CodingKeys: String, CodingKey {
                        case bundleId
                        case devices
                        case certificates
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships`.
                package var relationships: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                ///   - relationships:
                package init(
                    _type: Components.Schemas.ProfileCreateRequest.dataPayload._typePayload,
                    attributes: Components.Schemas.ProfileCreateRequest.dataPayload.attributesPayload,
                    relationships: Components.Schemas.ProfileCreateRequest.dataPayload.relationshipsPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                    self.relationships = relationships
                }
                package enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                    case relationships
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data`.
            package var data: Components.Schemas.ProfileCreateRequest.dataPayload
            /// Creates a new `ProfileCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            package init(data: Components.Schemas.ProfileCreateRequest.dataPayload) {
                self.data = data
            }
            package enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppWithoutIncludesResponse`.
        package struct AppWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppWithoutIncludesResponse/data`.
            package var data: Components.Schemas.App
            /// - Remark: Generated from `#/components/schemas/AppWithoutIncludesResponse/links`.
            package var links: Components.Schemas.DocumentLinks
            /// Creates a new `AppWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            package init(
                data: Components.Schemas.App,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilitiesWithoutIncludesResponse`.
        package struct BundleIdCapabilitiesWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilitiesWithoutIncludesResponse/data`.
            package var data: [Components.Schemas.BundleIdCapability]
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilitiesWithoutIncludesResponse/links`.
            package var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilitiesWithoutIncludesResponse/meta`.
            package var meta: Components.Schemas.PagingInformation?
            /// Creates a new `BundleIdCapabilitiesWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            package init(
                data: [Components.Schemas.BundleIdCapability],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfilesWithoutIncludesResponse`.
        package struct ProfilesWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfilesWithoutIncludesResponse/data`.
            package var data: [Components.Schemas.Profile]
            /// - Remark: Generated from `#/components/schemas/ProfilesWithoutIncludesResponse/links`.
            package var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/ProfilesWithoutIncludesResponse/meta`.
            package var meta: Components.Schemas.PagingInformation?
            /// Creates a new `ProfilesWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            package init(
                data: [Components.Schemas.Profile],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdWithoutIncludesResponse`.
        package struct BundleIdWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdWithoutIncludesResponse/data`.
            package var data: Components.Schemas.BundleId
            /// - Remark: Generated from `#/components/schemas/BundleIdWithoutIncludesResponse/links`.
            package var links: Components.Schemas.DocumentLinks
            /// Creates a new `BundleIdWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            package init(
                data: Components.Schemas.BundleId,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificatesWithoutIncludesResponse`.
        package struct CertificatesWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificatesWithoutIncludesResponse/data`.
            package var data: [Components.Schemas.Certificate]
            /// - Remark: Generated from `#/components/schemas/CertificatesWithoutIncludesResponse/links`.
            package var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/CertificatesWithoutIncludesResponse/meta`.
            package var meta: Components.Schemas.PagingInformation?
            /// Creates a new `CertificatesWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            package init(
                data: [Components.Schemas.Certificate],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/DevicesWithoutIncludesResponse`.
        package struct DevicesWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DevicesWithoutIncludesResponse/data`.
            package var data: [Components.Schemas.Device]
            /// - Remark: Generated from `#/components/schemas/DevicesWithoutIncludesResponse/links`.
            package var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/DevicesWithoutIncludesResponse/meta`.
            package var meta: Components.Schemas.PagingInformation?
            /// Creates a new `DevicesWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            package init(
                data: [Components.Schemas.Device],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            package enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        package struct ErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload`.
            package struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/id`.
                package var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/status`.
                package var status: Swift.String
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/code`.
                package var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/title`.
                package var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/detail`.
                package var detail: Swift.String
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/source`.
                @frozen package enum sourcePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/source/case1`.
                    case ErrorSourcePointer(Components.Schemas.ErrorSourcePointer)
                    /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/source/case2`.
                    case ErrorSourceParameter(Components.Schemas.ErrorSourceParameter)
                    package init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .ErrorSourcePointer(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .ErrorSourceParameter(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    package func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .ErrorSourcePointer(value):
                            try value.encode(to: encoder)
                        case let .ErrorSourceParameter(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/source`.
                package var source: Components.Schemas.ErrorResponse.errorsPayloadPayload.sourcePayload?
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/links`.
                package var links: Components.Schemas.ErrorLinks?
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/meta`.
                package struct metaPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                    /// Creates a new `metaPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorsPayload/meta`.
                package var meta: Components.Schemas.ErrorResponse.errorsPayloadPayload.metaPayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - status:
                ///   - code:
                ///   - title:
                ///   - detail:
                ///   - source:
                ///   - links:
                ///   - meta:
                package init(
                    id: Swift.String? = nil,
                    status: Swift.String,
                    code: Swift.String,
                    title: Swift.String,
                    detail: Swift.String,
                    source: Components.Schemas.ErrorResponse.errorsPayloadPayload.sourcePayload? = nil,
                    links: Components.Schemas.ErrorLinks? = nil,
                    meta: Components.Schemas.ErrorResponse.errorsPayloadPayload.metaPayload? = nil
                ) {
                    self.id = id
                    self.status = status
                    self.code = code
                    self.title = title
                    self.detail = detail
                    self.source = source
                    self.links = links
                    self.meta = meta
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case status
                    case code
                    case title
                    case detail
                    case source
                    case links
                    case meta
                }
            }
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/errors`.
            package typealias errorsPayload = [Components.Schemas.ErrorResponse.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/errors`.
            package var errors: Components.Schemas.ErrorResponse.errorsPayload?
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - errors:
            package init(errors: Components.Schemas.ErrorResponse.errorsPayload? = nil) {
                self.errors = errors
            }
            package enum CodingKeys: String, CodingKey {
                case errors
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorSourceParameter`.
        package struct ErrorSourceParameter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorSourceParameter/parameter`.
            package var parameter: Swift.String
            /// Creates a new `ErrorSourceParameter`.
            ///
            /// - Parameters:
            ///   - parameter:
            package init(parameter: Swift.String) {
                self.parameter = parameter
            }
            package enum CodingKeys: String, CodingKey {
                case parameter
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorSourcePointer`.
        package struct ErrorSourcePointer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorSourcePointer/pointer`.
            package var pointer: Swift.String
            /// Creates a new `ErrorSourcePointer`.
            ///
            /// - Parameters:
            ///   - pointer:
            package init(pointer: Swift.String) {
                self.pointer = pointer
            }
            package enum CodingKeys: String, CodingKey {
                case pointer
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorLinks`.
        package struct ErrorLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorLinks/about`.
            package var about: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated`.
            @frozen package enum associatedPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2`.
                package struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2/href`.
                    package var href: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2/meta`.
                    package struct metaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2/meta/source`.
                        package var source: Swift.String?
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - source:
                        package init(source: Swift.String? = nil) {
                            self.source = source
                        }
                        package enum CodingKeys: String, CodingKey {
                            case source
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2/meta`.
                    package var meta: Components.Schemas.ErrorLinks.associatedPayload.Case2Payload.metaPayload?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    ///   - meta:
                    package init(
                        href: Swift.String? = nil,
                        meta: Components.Schemas.ErrorLinks.associatedPayload.Case2Payload.metaPayload? = nil
                    ) {
                        self.href = href
                        self.meta = meta
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2`.
                case case2(Components.Schemas.ErrorLinks.associatedPayload.Case2Payload)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated`.
            package var associated: Components.Schemas.ErrorLinks.associatedPayload?
            /// Creates a new `ErrorLinks`.
            ///
            /// - Parameters:
            ///   - about:
            ///   - associated:
            package init(
                about: Swift.String? = nil,
                associated: Components.Schemas.ErrorLinks.associatedPayload? = nil
            ) {
                self.about = about
                self.associated = associated
            }
            package enum CodingKeys: String, CodingKey {
                case about
                case associated
            }
        }
        /// - Remark: Generated from `#/components/schemas/PagedDocumentLinks`.
        package struct PagedDocumentLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PagedDocumentLinks/self`.
            package var _self: Swift.String
            /// - Remark: Generated from `#/components/schemas/PagedDocumentLinks/first`.
            package var first: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PagedDocumentLinks/next`.
            package var next: Swift.String?
            /// Creates a new `PagedDocumentLinks`.
            ///
            /// - Parameters:
            ///   - _self:
            ///   - first:
            ///   - next:
            package init(
                _self: Swift.String,
                first: Swift.String? = nil,
                next: Swift.String? = nil
            ) {
                self._self = _self
                self.first = first
                self.next = next
            }
            package enum CodingKeys: String, CodingKey {
                case _self = "self"
                case first
                case next
            }
        }
        /// - Remark: Generated from `#/components/schemas/PagingInformation`.
        package struct PagingInformation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PagingInformation/paging`.
            package struct pagingPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PagingInformation/paging/total`.
                package var total: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/PagingInformation/paging/limit`.
                package var limit: Swift.Int
                /// Creates a new `pagingPayload`.
                ///
                /// - Parameters:
                ///   - total:
                ///   - limit:
                package init(
                    total: Swift.Int? = nil,
                    limit: Swift.Int
                ) {
                    self.total = total
                    self.limit = limit
                }
                package enum CodingKeys: String, CodingKey {
                    case total
                    case limit
                }
            }
            /// - Remark: Generated from `#/components/schemas/PagingInformation/paging`.
            package var paging: Components.Schemas.PagingInformation.pagingPayload
            /// Creates a new `PagingInformation`.
            ///
            /// - Parameters:
            ///   - paging:
            package init(paging: Components.Schemas.PagingInformation.pagingPayload) {
                self.paging = paging
            }
            package enum CodingKeys: String, CodingKey {
                case paging
            }
        }
        /// - Remark: Generated from `#/components/schemas/DocumentLinks`.
        package struct DocumentLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DocumentLinks/self`.
            package var _self: Swift.String
            /// Creates a new `DocumentLinks`.
            ///
            /// - Parameters:
            ///   - _self:
            package init(_self: Swift.String) {
                self._self = _self
            }
            package enum CodingKeys: String, CodingKey {
                case _self = "self"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResourceLinks`.
        package struct ResourceLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ResourceLinks/self`.
            package var _self: Swift.String?
            /// Creates a new `ResourceLinks`.
            ///
            /// - Parameters:
            ///   - _self:
            package init(_self: Swift.String? = nil) {
                self._self = _self
            }
            package enum CodingKeys: String, CodingKey {
                case _self = "self"
            }
        }
        /// - Remark: Generated from `#/components/schemas/RelationshipLinks`.
        package struct RelationshipLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RelationshipLinks/self`.
            package var _self: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RelationshipLinks/related`.
            package var related: Swift.String?
            /// Creates a new `RelationshipLinks`.
            ///
            /// - Parameters:
            ///   - _self:
            ///   - related:
            package init(
                _self: Swift.String? = nil,
                related: Swift.String? = nil
            ) {
                self._self = _self
                self.related = related
            }
            package enum CodingKeys: String, CodingKey {
                case _self = "self"
                case related
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdPlatform`.
        @frozen package enum BundleIdPlatform: String, Codable, Hashable, Sendable, CaseIterable {
            case IOS = "IOS"
            case MAC_OS = "MAC_OS"
            case UNIVERSAL = "UNIVERSAL"
        }
        /// - Remark: Generated from `#/components/schemas/CapabilityOption`.
        package struct CapabilityOption: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/key`.
            @frozen package enum keyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case XCODE_5 = "XCODE_5"
                case XCODE_6 = "XCODE_6"
                case COMPLETE_PROTECTION = "COMPLETE_PROTECTION"
                case PROTECTED_UNLESS_OPEN = "PROTECTED_UNLESS_OPEN"
                case PROTECTED_UNTIL_FIRST_USER_AUTH = "PROTECTED_UNTIL_FIRST_USER_AUTH"
                case PRIMARY_APP_CONSENT = "PRIMARY_APP_CONSENT"
            }
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/key`.
            package var key: Components.Schemas.CapabilityOption.keyPayload?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/enabledByDefault`.
            package var enabledByDefault: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/enabled`.
            package var enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/supportsWildcard`.
            package var supportsWildcard: Swift.Bool?
            /// Creates a new `CapabilityOption`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - description:
            ///   - enabledByDefault:
            ///   - enabled:
            ///   - supportsWildcard:
            package init(
                key: Components.Schemas.CapabilityOption.keyPayload? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                enabledByDefault: Swift.Bool? = nil,
                enabled: Swift.Bool? = nil,
                supportsWildcard: Swift.Bool? = nil
            ) {
                self.key = key
                self.name = name
                self.description = description
                self.enabledByDefault = enabledByDefault
                self.enabled = enabled
                self.supportsWildcard = supportsWildcard
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case name
                case description
                case enabledByDefault
                case enabled
                case supportsWildcard
            }
        }
        /// - Remark: Generated from `#/components/schemas/CapabilitySetting`.
        package struct CapabilitySetting: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/key`.
            @frozen package enum keyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ICLOUD_VERSION = "ICLOUD_VERSION"
                case DATA_PROTECTION_PERMISSION_LEVEL = "DATA_PROTECTION_PERMISSION_LEVEL"
                case APPLE_ID_AUTH_APP_CONSENT = "APPLE_ID_AUTH_APP_CONSENT"
            }
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/key`.
            package var key: Components.Schemas.CapabilitySetting.keyPayload?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/enabledByDefault`.
            package var enabledByDefault: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/visible`.
            package var visible: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/allowedInstances`.
            @frozen package enum allowedInstancesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ENTRY = "ENTRY"
                case SINGLE = "SINGLE"
                case MULTIPLE = "MULTIPLE"
            }
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/allowedInstances`.
            package var allowedInstances: Components.Schemas.CapabilitySetting.allowedInstancesPayload?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/minInstances`.
            package var minInstances: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/options`.
            package var options: [Components.Schemas.CapabilityOption]?
            /// Creates a new `CapabilitySetting`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - description:
            ///   - enabledByDefault:
            ///   - visible:
            ///   - allowedInstances:
            ///   - minInstances:
            ///   - options:
            package init(
                key: Components.Schemas.CapabilitySetting.keyPayload? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                enabledByDefault: Swift.Bool? = nil,
                visible: Swift.Bool? = nil,
                allowedInstances: Components.Schemas.CapabilitySetting.allowedInstancesPayload? = nil,
                minInstances: Swift.Int? = nil,
                options: [Components.Schemas.CapabilityOption]? = nil
            ) {
                self.key = key
                self.name = name
                self.description = description
                self.enabledByDefault = enabledByDefault
                self.visible = visible
                self.allowedInstances = allowedInstances
                self.minInstances = minInstances
                self.options = options
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case name
                case description
                case enabledByDefault
                case visible
                case allowedInstances
                case minInstances
                case options
            }
        }
        /// - Remark: Generated from `#/components/schemas/CapabilityType`.
        @frozen package enum CapabilityType: String, Codable, Hashable, Sendable, CaseIterable {
            case ICLOUD = "ICLOUD"
            case IN_APP_PURCHASE = "IN_APP_PURCHASE"
            case GAME_CENTER = "GAME_CENTER"
            case PUSH_NOTIFICATIONS = "PUSH_NOTIFICATIONS"
            case WALLET = "WALLET"
            case INTER_APP_AUDIO = "INTER_APP_AUDIO"
            case MAPS = "MAPS"
            case ASSOCIATED_DOMAINS = "ASSOCIATED_DOMAINS"
            case PERSONAL_VPN = "PERSONAL_VPN"
            case APP_GROUPS = "APP_GROUPS"
            case HEALTHKIT = "HEALTHKIT"
            case HOMEKIT = "HOMEKIT"
            case WIRELESS_ACCESSORY_CONFIGURATION = "WIRELESS_ACCESSORY_CONFIGURATION"
            case APPLE_PAY = "APPLE_PAY"
            case DATA_PROTECTION = "DATA_PROTECTION"
            case SIRIKIT = "SIRIKIT"
            case NETWORK_EXTENSIONS = "NETWORK_EXTENSIONS"
            case MULTIPATH = "MULTIPATH"
            case HOT_SPOT = "HOT_SPOT"
            case NFC_TAG_READING = "NFC_TAG_READING"
            case CLASSKIT = "CLASSKIT"
            case AUTOFILL_CREDENTIAL_PROVIDER = "AUTOFILL_CREDENTIAL_PROVIDER"
            case ACCESS_WIFI_INFORMATION = "ACCESS_WIFI_INFORMATION"
            case NETWORK_CUSTOM_PROTOCOL = "NETWORK_CUSTOM_PROTOCOL"
            case COREMEDIA_HLS_LOW_LATENCY = "COREMEDIA_HLS_LOW_LATENCY"
            case SYSTEM_EXTENSION_INSTALL = "SYSTEM_EXTENSION_INSTALL"
            case USER_MANAGEMENT = "USER_MANAGEMENT"
            case APPLE_ID_AUTH = "APPLE_ID_AUTH"
        }
        /// - Remark: Generated from `#/components/schemas/CertificateType`.
        @frozen package enum CertificateType: String, Codable, Hashable, Sendable, CaseIterable {
            case IOS_DEVELOPMENT = "IOS_DEVELOPMENT"
            case IOS_DISTRIBUTION = "IOS_DISTRIBUTION"
            case MAC_APP_DISTRIBUTION = "MAC_APP_DISTRIBUTION"
            case MAC_INSTALLER_DISTRIBUTION = "MAC_INSTALLER_DISTRIBUTION"
            case MAC_APP_DEVELOPMENT = "MAC_APP_DEVELOPMENT"
            case DEVELOPER_ID_KEXT = "DEVELOPER_ID_KEXT"
            case DEVELOPER_ID_KEXT_G2 = "DEVELOPER_ID_KEXT_G2"
            case DEVELOPER_ID_APPLICATION = "DEVELOPER_ID_APPLICATION"
            case DEVELOPER_ID_APPLICATION_G2 = "DEVELOPER_ID_APPLICATION_G2"
            case DEVELOPMENT = "DEVELOPMENT"
            case DISTRIBUTION = "DISTRIBUTION"
            case PASS_TYPE_ID = "PASS_TYPE_ID"
            case PASS_TYPE_ID_WITH_NFC = "PASS_TYPE_ID_WITH_NFC"
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionStatusUrlVersion`.
        @frozen package enum SubscriptionStatusUrlVersion: String, Codable, Hashable, Sendable, CaseIterable {
            case V1 = "V1"
            case V2 = "V2"
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    package enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    package enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    package enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    package enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
package enum Operations {
    /// - Remark: HTTP `POST /v1/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)`.
    package enum bundleIdCapabilities_createInstance {
        package static let id: Swift.String = "bundleIdCapabilities_createInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIdCapabilities_createInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIdCapabilities_createInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIdCapabilities_createInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BundleIdCapabilityCreateRequest)
            }
            package var body: Operations.bundleIdCapabilities_createInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.bundleIdCapabilities_createInstance.Input.Headers = .init(),
                body: Operations.bundleIdCapabilities_createInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_createInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_createInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIdCapabilities_createInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIdCapabilities_createInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_createInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_createInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIdCapabilities_createInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIdCapabilities_createInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_createInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_createInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIdCapabilities_createInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIdCapabilities_createInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_createInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_createInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.bundleIdCapabilities_createInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.bundleIdCapabilities_createInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.BundleIdCapabilityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BundleIdCapabilityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_createInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_createInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single BundleIdCapability
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.bundleIdCapabilities_createInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.bundleIdCapabilities_createInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_createInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_createInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.bundleIdCapabilities_createInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.bundleIdCapabilities_createInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)`.
    package enum bundleIdCapabilities_updateInstance {
        package static let id: Swift.String = "bundleIdCapabilities_updateInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.bundleIdCapabilities_updateInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIdCapabilities_updateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIdCapabilities_updateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIdCapabilities_updateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.BundleIdCapabilityUpdateRequest)
            }
            package var body: Operations.bundleIdCapabilities_updateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.bundleIdCapabilities_updateInstance.Input.Path,
                headers: Operations.bundleIdCapabilities_updateInstance.Input.Headers = .init(),
                body: Operations.bundleIdCapabilities_updateInstance.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_updateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_updateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIdCapabilities_updateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIdCapabilities_updateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_updateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_updateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIdCapabilities_updateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIdCapabilities_updateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_updateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_updateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIdCapabilities_updateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIdCapabilities_updateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_updateInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_updateInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bundleIdCapabilities_updateInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.bundleIdCapabilities_updateInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_updateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_updateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.bundleIdCapabilities_updateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.bundleIdCapabilities_updateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdCapabilityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BundleIdCapabilityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_updateInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_updateInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single BundleIdCapability
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bundleIdCapabilities_updateInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.bundleIdCapabilities_updateInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_updateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_updateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.bundleIdCapabilities_updateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.bundleIdCapabilities_updateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)`.
    package enum bundleIdCapabilities_deleteInstance {
        package static let id: Swift.String = "bundleIdCapabilities_deleteInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.bundleIdCapabilities_deleteInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIdCapabilities_deleteInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIdCapabilities_deleteInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIdCapabilities_deleteInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.bundleIdCapabilities_deleteInstance.Input.Path,
                headers: Operations.bundleIdCapabilities_deleteInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_deleteInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_deleteInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIdCapabilities_deleteInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIdCapabilities_deleteInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_deleteInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_deleteInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIdCapabilities_deleteInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIdCapabilities_deleteInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_deleteInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_deleteInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIdCapabilities_deleteInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIdCapabilities_deleteInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_deleteInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_deleteInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bundleIdCapabilities_deleteInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.bundleIdCapabilities_deleteInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIdCapabilities_deleteInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIdCapabilities_deleteInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.bundleIdCapabilities_deleteInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.bundleIdCapabilities_deleteInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.bundleIdCapabilities_deleteInstance.Output.NoContent)
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.bundleIdCapabilities_deleteInstance.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)`.
    package enum bundleIds_getCollection {
        package static let id: Swift.String = "bundleIds_getCollection"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query`.
            package struct Query: Sendable, Hashable {
                /// filter by attribute 'name'
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[name]`.
                package var filter_lbrack_name_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter_lbrack_platform_rbrack_Payload`.
                @frozen package enum filter_lbrack_platform_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case IOS = "IOS"
                    case MAC_OS = "MAC_OS"
                    case UNIVERSAL = "UNIVERSAL"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[platform]`.
                package typealias filter_lbrack_platform_rbrack_Payload = [Operations.bundleIds_getCollection.Input.Query.filter_lbrack_platform_rbrack_PayloadPayload]
                /// filter by attribute 'platform'
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[platform]`.
                package var filter_lbrack_platform_rbrack_: Operations.bundleIds_getCollection.Input.Query.filter_lbrack_platform_rbrack_Payload?
                /// filter by attribute 'identifier'
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[identifier]`.
                package var filter_lbrack_identifier_rbrack_: [Swift.String]?
                /// filter by attribute 'seedId'
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[seedId]`.
                package var filter_lbrack_seedId_rbrack_: [Swift.String]?
                /// filter by id(s)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[id]`.
                package var filter_lbrack_id_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/sortPayload`.
                @frozen package enum sortPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case _hyphen_name = "-name"
                    case platform = "platform"
                    case _hyphen_platform = "-platform"
                    case identifier = "identifier"
                    case _hyphen_identifier = "-identifier"
                    case seedId = "seedId"
                    case _hyphen_seedId = "-seedId"
                    case id = "id"
                    case _hyphen_id = "-id"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/sort`.
                package typealias sortPayload = [Operations.bundleIds_getCollection.Input.Query.sortPayloadPayload]
                /// comma-separated list of sort expressions; resources will be sorted as specified
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/sort`.
                package var sort: Operations.bundleIds_getCollection.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen package enum fields_lbrack_bundleIds_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[bundleIds]`.
                package typealias fields_lbrack_bundleIds_rbrack_Payload = [Operations.bundleIds_getCollection.Input.Query.fields_lbrack_bundleIds_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[bundleIds]`.
                package var fields_lbrack_bundleIds_rbrack_: Operations.bundleIds_getCollection.Input.Query.fields_lbrack_bundleIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields_lbrack_profiles_rbrack_Payload`.
                @frozen package enum fields_lbrack_profiles_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[profiles]`.
                package typealias fields_lbrack_profiles_rbrack_Payload = [Operations.bundleIds_getCollection.Input.Query.fields_lbrack_profiles_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[profiles]`.
                package var fields_lbrack_profiles_rbrack_: Operations.bundleIds_getCollection.Input.Query.fields_lbrack_profiles_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields_lbrack_bundleIdCapabilities_rbrack_Payload`.
                @frozen package enum fields_lbrack_bundleIdCapabilities_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case capabilityType = "capabilityType"
                    case settings = "settings"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[bundleIdCapabilities]`.
                package typealias fields_lbrack_bundleIdCapabilities_rbrack_Payload = [Operations.bundleIds_getCollection.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type bundleIdCapabilities
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[bundleIdCapabilities]`.
                package var fields_lbrack_bundleIdCapabilities_rbrack_: Operations.bundleIds_getCollection.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields_lbrack_apps_rbrack_Payload`.
                @frozen package enum fields_lbrack_apps_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case bundleId = "bundleId"
                    case sku = "sku"
                    case primaryLocale = "primaryLocale"
                    case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
                    case subscriptionStatusUrl = "subscriptionStatusUrl"
                    case subscriptionStatusUrlVersion = "subscriptionStatusUrlVersion"
                    case subscriptionStatusUrlForSandbox = "subscriptionStatusUrlForSandbox"
                    case subscriptionStatusUrlVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                    case contentRightsDeclaration = "contentRightsDeclaration"
                    case streamlinedPurchasingEnabled = "streamlinedPurchasingEnabled"
                    case appEncryptionDeclarations = "appEncryptionDeclarations"
                    case ciProduct = "ciProduct"
                    case betaTesters = "betaTesters"
                    case betaGroups = "betaGroups"
                    case appStoreVersions = "appStoreVersions"
                    case preReleaseVersions = "preReleaseVersions"
                    case betaAppLocalizations = "betaAppLocalizations"
                    case builds = "builds"
                    case betaLicenseAgreement = "betaLicenseAgreement"
                    case betaAppReviewDetail = "betaAppReviewDetail"
                    case appInfos = "appInfos"
                    case appClips = "appClips"
                    case appPricePoints = "appPricePoints"
                    case endUserLicenseAgreement = "endUserLicenseAgreement"
                    case appPriceSchedule = "appPriceSchedule"
                    case appAvailabilityV2 = "appAvailabilityV2"
                    case inAppPurchases = "inAppPurchases"
                    case subscriptionGroups = "subscriptionGroups"
                    case gameCenterEnabledVersions = "gameCenterEnabledVersions"
                    case perfPowerMetrics = "perfPowerMetrics"
                    case appCustomProductPages = "appCustomProductPages"
                    case inAppPurchasesV2 = "inAppPurchasesV2"
                    case promotedPurchases = "promotedPurchases"
                    case appEvents = "appEvents"
                    case reviewSubmissions = "reviewSubmissions"
                    case subscriptionGracePeriod = "subscriptionGracePeriod"
                    case customerReviews = "customerReviews"
                    case gameCenterDetail = "gameCenterDetail"
                    case appStoreVersionExperimentsV2 = "appStoreVersionExperimentsV2"
                    case alternativeDistributionKey = "alternativeDistributionKey"
                    case analyticsReportRequests = "analyticsReportRequests"
                    case marketplaceSearchDetail = "marketplaceSearchDetail"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[apps]`.
                package typealias fields_lbrack_apps_rbrack_Payload = [Operations.bundleIds_getCollection.Input.Query.fields_lbrack_apps_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type apps
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[apps]`.
                package var fields_lbrack_apps_rbrack_: Operations.bundleIds_getCollection.Input.Query.fields_lbrack_apps_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/limit`.
                package var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/includePayload`.
                @frozen package enum includePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/include`.
                package typealias includePayload = [Operations.bundleIds_getCollection.Input.Query.includePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/include`.
                package var include: Operations.bundleIds_getCollection.Input.Query.includePayload?
                /// maximum number of related bundleIdCapabilities returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/limit[bundleIdCapabilities]`.
                package var limit_lbrack_bundleIdCapabilities_rbrack_: Swift.Int?
                /// maximum number of related profiles returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/limit[profiles]`.
                package var limit_lbrack_profiles_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter_lbrack_name_rbrack_: filter by attribute 'name'
                ///   - filter_lbrack_platform_rbrack_: filter by attribute 'platform'
                ///   - filter_lbrack_identifier_rbrack_: filter by attribute 'identifier'
                ///   - filter_lbrack_seedId_rbrack_: filter by attribute 'seedId'
                ///   - filter_lbrack_id_rbrack_: filter by id(s)
                ///   - sort: comma-separated list of sort expressions; resources will be sorted as specified
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - fields_lbrack_bundleIdCapabilities_rbrack_: the fields to include for returned resources of type bundleIdCapabilities
                ///   - fields_lbrack_apps_rbrack_: the fields to include for returned resources of type apps
                ///   - limit: maximum resources per page
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_bundleIdCapabilities_rbrack_: maximum number of related bundleIdCapabilities returned (when they are included)
                ///   - limit_lbrack_profiles_rbrack_: maximum number of related profiles returned (when they are included)
                package init(
                    filter_lbrack_name_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_platform_rbrack_: Operations.bundleIds_getCollection.Input.Query.filter_lbrack_platform_rbrack_Payload? = nil,
                    filter_lbrack_identifier_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_seedId_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_id_rbrack_: [Swift.String]? = nil,
                    sort: Operations.bundleIds_getCollection.Input.Query.sortPayload? = nil,
                    fields_lbrack_bundleIds_rbrack_: Operations.bundleIds_getCollection.Input.Query.fields_lbrack_bundleIds_rbrack_Payload? = nil,
                    fields_lbrack_profiles_rbrack_: Operations.bundleIds_getCollection.Input.Query.fields_lbrack_profiles_rbrack_Payload? = nil,
                    fields_lbrack_bundleIdCapabilities_rbrack_: Operations.bundleIds_getCollection.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_Payload? = nil,
                    fields_lbrack_apps_rbrack_: Operations.bundleIds_getCollection.Input.Query.fields_lbrack_apps_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil,
                    include: Operations.bundleIds_getCollection.Input.Query.includePayload? = nil,
                    limit_lbrack_bundleIdCapabilities_rbrack_: Swift.Int? = nil,
                    limit_lbrack_profiles_rbrack_: Swift.Int? = nil
                ) {
                    self.filter_lbrack_name_rbrack_ = filter_lbrack_name_rbrack_
                    self.filter_lbrack_platform_rbrack_ = filter_lbrack_platform_rbrack_
                    self.filter_lbrack_identifier_rbrack_ = filter_lbrack_identifier_rbrack_
                    self.filter_lbrack_seedId_rbrack_ = filter_lbrack_seedId_rbrack_
                    self.filter_lbrack_id_rbrack_ = filter_lbrack_id_rbrack_
                    self.sort = sort
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.fields_lbrack_bundleIdCapabilities_rbrack_ = fields_lbrack_bundleIdCapabilities_rbrack_
                    self.fields_lbrack_apps_rbrack_ = fields_lbrack_apps_rbrack_
                    self.limit = limit
                    self.include = include
                    self.limit_lbrack_bundleIdCapabilities_rbrack_ = limit_lbrack_bundleIdCapabilities_rbrack_
                    self.limit_lbrack_profiles_rbrack_ = limit_lbrack_profiles_rbrack_
                }
            }
            package var query: Operations.bundleIds_getCollection.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_getCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_getCollection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIds_getCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.bundleIds_getCollection.Input.Query = .init(),
                headers: Operations.bundleIds_getCollection.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getCollection.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getCollection.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIds_getCollection.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIds_getCollection.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getCollection.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getCollection.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIds_getCollection.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIds_getCollection.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getCollection.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getCollection.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIds_getCollection.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIds_getCollection.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BundleIdsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getCollection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of BundleIds
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bundleIds_getCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.bundleIds_getCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)`.
    package enum bundleIds_createInstance {
        package static let id: Swift.String = "bundleIds_createInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_createInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_createInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIds_createInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/bundleIds/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BundleIdCreateRequest)
            }
            package var body: Operations.bundleIds_createInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.bundleIds_createInstance.Input.Headers = .init(),
                body: Operations.bundleIds_createInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_createInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_createInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIds_createInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIds_createInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_createInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_createInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIds_createInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIds_createInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_createInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_createInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIds_createInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIds_createInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_createInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_createInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.bundleIds_createInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.bundleIds_createInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.BundleIdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BundleIdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_createInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_createInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single BundleId
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.bundleIds_createInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.bundleIds_createInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_createInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_createInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.bundleIds_createInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.bundleIds_createInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)`.
    package enum bundleIds_getInstance {
        package static let id: Swift.String = "bundleIds_getInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.bundleIds_getInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen package enum fields_lbrack_bundleIds_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[bundleIds]`.
                package typealias fields_lbrack_bundleIds_rbrack_Payload = [Operations.bundleIds_getInstance.Input.Query.fields_lbrack_bundleIds_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[bundleIds]`.
                package var fields_lbrack_bundleIds_rbrack_: Operations.bundleIds_getInstance.Input.Query.fields_lbrack_bundleIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields_lbrack_profiles_rbrack_Payload`.
                @frozen package enum fields_lbrack_profiles_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[profiles]`.
                package typealias fields_lbrack_profiles_rbrack_Payload = [Operations.bundleIds_getInstance.Input.Query.fields_lbrack_profiles_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[profiles]`.
                package var fields_lbrack_profiles_rbrack_: Operations.bundleIds_getInstance.Input.Query.fields_lbrack_profiles_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields_lbrack_bundleIdCapabilities_rbrack_Payload`.
                @frozen package enum fields_lbrack_bundleIdCapabilities_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case capabilityType = "capabilityType"
                    case settings = "settings"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[bundleIdCapabilities]`.
                package typealias fields_lbrack_bundleIdCapabilities_rbrack_Payload = [Operations.bundleIds_getInstance.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type bundleIdCapabilities
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[bundleIdCapabilities]`.
                package var fields_lbrack_bundleIdCapabilities_rbrack_: Operations.bundleIds_getInstance.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields_lbrack_apps_rbrack_Payload`.
                @frozen package enum fields_lbrack_apps_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case bundleId = "bundleId"
                    case sku = "sku"
                    case primaryLocale = "primaryLocale"
                    case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
                    case subscriptionStatusUrl = "subscriptionStatusUrl"
                    case subscriptionStatusUrlVersion = "subscriptionStatusUrlVersion"
                    case subscriptionStatusUrlForSandbox = "subscriptionStatusUrlForSandbox"
                    case subscriptionStatusUrlVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                    case contentRightsDeclaration = "contentRightsDeclaration"
                    case streamlinedPurchasingEnabled = "streamlinedPurchasingEnabled"
                    case appEncryptionDeclarations = "appEncryptionDeclarations"
                    case ciProduct = "ciProduct"
                    case betaTesters = "betaTesters"
                    case betaGroups = "betaGroups"
                    case appStoreVersions = "appStoreVersions"
                    case preReleaseVersions = "preReleaseVersions"
                    case betaAppLocalizations = "betaAppLocalizations"
                    case builds = "builds"
                    case betaLicenseAgreement = "betaLicenseAgreement"
                    case betaAppReviewDetail = "betaAppReviewDetail"
                    case appInfos = "appInfos"
                    case appClips = "appClips"
                    case appPricePoints = "appPricePoints"
                    case endUserLicenseAgreement = "endUserLicenseAgreement"
                    case appPriceSchedule = "appPriceSchedule"
                    case appAvailabilityV2 = "appAvailabilityV2"
                    case inAppPurchases = "inAppPurchases"
                    case subscriptionGroups = "subscriptionGroups"
                    case gameCenterEnabledVersions = "gameCenterEnabledVersions"
                    case perfPowerMetrics = "perfPowerMetrics"
                    case appCustomProductPages = "appCustomProductPages"
                    case inAppPurchasesV2 = "inAppPurchasesV2"
                    case promotedPurchases = "promotedPurchases"
                    case appEvents = "appEvents"
                    case reviewSubmissions = "reviewSubmissions"
                    case subscriptionGracePeriod = "subscriptionGracePeriod"
                    case customerReviews = "customerReviews"
                    case gameCenterDetail = "gameCenterDetail"
                    case appStoreVersionExperimentsV2 = "appStoreVersionExperimentsV2"
                    case alternativeDistributionKey = "alternativeDistributionKey"
                    case analyticsReportRequests = "analyticsReportRequests"
                    case marketplaceSearchDetail = "marketplaceSearchDetail"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[apps]`.
                package typealias fields_lbrack_apps_rbrack_Payload = [Operations.bundleIds_getInstance.Input.Query.fields_lbrack_apps_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type apps
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[apps]`.
                package var fields_lbrack_apps_rbrack_: Operations.bundleIds_getInstance.Input.Query.fields_lbrack_apps_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/includePayload`.
                @frozen package enum includePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/include`.
                package typealias includePayload = [Operations.bundleIds_getInstance.Input.Query.includePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/include`.
                package var include: Operations.bundleIds_getInstance.Input.Query.includePayload?
                /// maximum number of related bundleIdCapabilities returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/limit[bundleIdCapabilities]`.
                package var limit_lbrack_bundleIdCapabilities_rbrack_: Swift.Int?
                /// maximum number of related profiles returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/limit[profiles]`.
                package var limit_lbrack_profiles_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - fields_lbrack_bundleIdCapabilities_rbrack_: the fields to include for returned resources of type bundleIdCapabilities
                ///   - fields_lbrack_apps_rbrack_: the fields to include for returned resources of type apps
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_bundleIdCapabilities_rbrack_: maximum number of related bundleIdCapabilities returned (when they are included)
                ///   - limit_lbrack_profiles_rbrack_: maximum number of related profiles returned (when they are included)
                package init(
                    fields_lbrack_bundleIds_rbrack_: Operations.bundleIds_getInstance.Input.Query.fields_lbrack_bundleIds_rbrack_Payload? = nil,
                    fields_lbrack_profiles_rbrack_: Operations.bundleIds_getInstance.Input.Query.fields_lbrack_profiles_rbrack_Payload? = nil,
                    fields_lbrack_bundleIdCapabilities_rbrack_: Operations.bundleIds_getInstance.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_Payload? = nil,
                    fields_lbrack_apps_rbrack_: Operations.bundleIds_getInstance.Input.Query.fields_lbrack_apps_rbrack_Payload? = nil,
                    include: Operations.bundleIds_getInstance.Input.Query.includePayload? = nil,
                    limit_lbrack_bundleIdCapabilities_rbrack_: Swift.Int? = nil,
                    limit_lbrack_profiles_rbrack_: Swift.Int? = nil
                ) {
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.fields_lbrack_bundleIdCapabilities_rbrack_ = fields_lbrack_bundleIdCapabilities_rbrack_
                    self.fields_lbrack_apps_rbrack_ = fields_lbrack_apps_rbrack_
                    self.include = include
                    self.limit_lbrack_bundleIdCapabilities_rbrack_ = limit_lbrack_bundleIdCapabilities_rbrack_
                    self.limit_lbrack_profiles_rbrack_ = limit_lbrack_profiles_rbrack_
                }
            }
            package var query: Operations.bundleIds_getInstance.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_getInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_getInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIds_getInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.bundleIds_getInstance.Input.Path,
                query: Operations.bundleIds_getInstance.Input.Query = .init(),
                headers: Operations.bundleIds_getInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIds_getInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIds_getInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIds_getInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIds_getInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIds_getInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIds_getInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bundleIds_getInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.bundleIds_getInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BundleIdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_getInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_getInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single BundleId
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bundleIds_getInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.bundleIds_getInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)`.
    package enum bundleIds_updateInstance {
        package static let id: Swift.String = "bundleIds_updateInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.bundleIds_updateInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_updateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_updateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIds_updateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.BundleIdUpdateRequest)
            }
            package var body: Operations.bundleIds_updateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.bundleIds_updateInstance.Input.Path,
                headers: Operations.bundleIds_updateInstance.Input.Headers = .init(),
                body: Operations.bundleIds_updateInstance.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_updateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_updateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIds_updateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIds_updateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_updateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_updateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIds_updateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIds_updateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_updateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_updateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIds_updateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIds_updateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_updateInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_updateInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bundleIds_updateInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.bundleIds_updateInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_updateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_updateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.bundleIds_updateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.bundleIds_updateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BundleIdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_updateInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_updateInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single BundleId
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bundleIds_updateInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.bundleIds_updateInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_updateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_updateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.bundleIds_updateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.bundleIds_updateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)`.
    package enum bundleIds_deleteInstance {
        package static let id: Swift.String = "bundleIds_deleteInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.bundleIds_deleteInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_deleteInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_deleteInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIds_deleteInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.bundleIds_deleteInstance.Input.Path,
                headers: Operations.bundleIds_deleteInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_deleteInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_deleteInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIds_deleteInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIds_deleteInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_deleteInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_deleteInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIds_deleteInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIds_deleteInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_deleteInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_deleteInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIds_deleteInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIds_deleteInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_deleteInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_deleteInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bundleIds_deleteInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.bundleIds_deleteInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_deleteInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_deleteInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.bundleIds_deleteInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.bundleIds_deleteInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.bundleIds_deleteInstance.Output.NoContent)
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.bundleIds_deleteInstance.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)`.
    package enum certificates_getCollection {
        package static let id: Swift.String = "certificates_getCollection"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/GET/query`.
            package struct Query: Sendable, Hashable {
                /// filter by attribute 'displayName'
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[displayName]`.
                package var filter_lbrack_displayName_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter_lbrack_certificateType_rbrack_Payload`.
                @frozen package enum filter_lbrack_certificateType_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case IOS_DEVELOPMENT = "IOS_DEVELOPMENT"
                    case IOS_DISTRIBUTION = "IOS_DISTRIBUTION"
                    case MAC_APP_DISTRIBUTION = "MAC_APP_DISTRIBUTION"
                    case MAC_INSTALLER_DISTRIBUTION = "MAC_INSTALLER_DISTRIBUTION"
                    case MAC_APP_DEVELOPMENT = "MAC_APP_DEVELOPMENT"
                    case DEVELOPER_ID_KEXT = "DEVELOPER_ID_KEXT"
                    case DEVELOPER_ID_KEXT_G2 = "DEVELOPER_ID_KEXT_G2"
                    case DEVELOPER_ID_APPLICATION = "DEVELOPER_ID_APPLICATION"
                    case DEVELOPER_ID_APPLICATION_G2 = "DEVELOPER_ID_APPLICATION_G2"
                    case DEVELOPMENT = "DEVELOPMENT"
                    case DISTRIBUTION = "DISTRIBUTION"
                    case PASS_TYPE_ID = "PASS_TYPE_ID"
                    case PASS_TYPE_ID_WITH_NFC = "PASS_TYPE_ID_WITH_NFC"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[certificateType]`.
                package typealias filter_lbrack_certificateType_rbrack_Payload = [Operations.certificates_getCollection.Input.Query.filter_lbrack_certificateType_rbrack_PayloadPayload]
                /// filter by attribute 'certificateType'
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[certificateType]`.
                package var filter_lbrack_certificateType_rbrack_: Operations.certificates_getCollection.Input.Query.filter_lbrack_certificateType_rbrack_Payload?
                /// filter by attribute 'serialNumber'
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[serialNumber]`.
                package var filter_lbrack_serialNumber_rbrack_: [Swift.String]?
                /// filter by id(s)
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[id]`.
                package var filter_lbrack_id_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/sortPayload`.
                @frozen package enum sortPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case displayName = "displayName"
                    case _hyphen_displayName = "-displayName"
                    case certificateType = "certificateType"
                    case _hyphen_certificateType = "-certificateType"
                    case serialNumber = "serialNumber"
                    case _hyphen_serialNumber = "-serialNumber"
                    case id = "id"
                    case _hyphen_id = "-id"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/sort`.
                package typealias sortPayload = [Operations.certificates_getCollection.Input.Query.sortPayloadPayload]
                /// comma-separated list of sort expressions; resources will be sorted as specified
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/sort`.
                package var sort: Operations.certificates_getCollection.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/fields_lbrack_certificates_rbrack_Payload`.
                @frozen package enum fields_lbrack_certificates_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/fields[certificates]`.
                package typealias fields_lbrack_certificates_rbrack_Payload = [Operations.certificates_getCollection.Input.Query.fields_lbrack_certificates_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/fields[certificates]`.
                package var fields_lbrack_certificates_rbrack_: Operations.certificates_getCollection.Input.Query.fields_lbrack_certificates_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/limit`.
                package var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter_lbrack_displayName_rbrack_: filter by attribute 'displayName'
                ///   - filter_lbrack_certificateType_rbrack_: filter by attribute 'certificateType'
                ///   - filter_lbrack_serialNumber_rbrack_: filter by attribute 'serialNumber'
                ///   - filter_lbrack_id_rbrack_: filter by id(s)
                ///   - sort: comma-separated list of sort expressions; resources will be sorted as specified
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - limit: maximum resources per page
                package init(
                    filter_lbrack_displayName_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_certificateType_rbrack_: Operations.certificates_getCollection.Input.Query.filter_lbrack_certificateType_rbrack_Payload? = nil,
                    filter_lbrack_serialNumber_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_id_rbrack_: [Swift.String]? = nil,
                    sort: Operations.certificates_getCollection.Input.Query.sortPayload? = nil,
                    fields_lbrack_certificates_rbrack_: Operations.certificates_getCollection.Input.Query.fields_lbrack_certificates_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.filter_lbrack_displayName_rbrack_ = filter_lbrack_displayName_rbrack_
                    self.filter_lbrack_certificateType_rbrack_ = filter_lbrack_certificateType_rbrack_
                    self.filter_lbrack_serialNumber_rbrack_ = filter_lbrack_serialNumber_rbrack_
                    self.filter_lbrack_id_rbrack_ = filter_lbrack_id_rbrack_
                    self.sort = sort
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.limit = limit
                }
            }
            package var query: Operations.certificates_getCollection.Input.Query
            /// - Remark: Generated from `#/paths/v1/certificates/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.certificates_getCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.certificates_getCollection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.certificates_getCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.certificates_getCollection.Input.Query = .init(),
                headers: Operations.certificates_getCollection.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getCollection.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getCollection.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.certificates_getCollection.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.certificates_getCollection.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getCollection.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getCollection.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.certificates_getCollection.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.certificates_getCollection.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getCollection.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getCollection.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.certificates_getCollection.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.certificates_getCollection.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CertificatesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.CertificatesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getCollection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Certificates
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.certificates_getCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.certificates_getCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)`.
    package enum certificates_createInstance {
        package static let id: Swift.String = "certificates_createInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.certificates_createInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.certificates_createInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.certificates_createInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/certificates/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CertificateCreateRequest)
            }
            package var body: Operations.certificates_createInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.certificates_createInstance.Input.Headers = .init(),
                body: Operations.certificates_createInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_createInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_createInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.certificates_createInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.certificates_createInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_createInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_createInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.certificates_createInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.certificates_createInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_createInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_createInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.certificates_createInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.certificates_createInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_createInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_createInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.certificates_createInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.certificates_createInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.CertificateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.CertificateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_createInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_createInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single Certificate
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.certificates_createInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.certificates_createInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_createInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_createInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.certificates_createInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.certificates_createInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)`.
    package enum certificates_getInstance {
        package static let id: Swift.String = "certificates_getInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.certificates_getInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/fields_lbrack_certificates_rbrack_Payload`.
                @frozen package enum fields_lbrack_certificates_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/fields[certificates]`.
                package typealias fields_lbrack_certificates_rbrack_Payload = [Operations.certificates_getInstance.Input.Query.fields_lbrack_certificates_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/fields[certificates]`.
                package var fields_lbrack_certificates_rbrack_: Operations.certificates_getInstance.Input.Query.fields_lbrack_certificates_rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                package init(fields_lbrack_certificates_rbrack_: Operations.certificates_getInstance.Input.Query.fields_lbrack_certificates_rbrack_Payload? = nil) {
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                }
            }
            package var query: Operations.certificates_getInstance.Input.Query
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.certificates_getInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.certificates_getInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.certificates_getInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.certificates_getInstance.Input.Path,
                query: Operations.certificates_getInstance.Input.Query = .init(),
                headers: Operations.certificates_getInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.certificates_getInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.certificates_getInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.certificates_getInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.certificates_getInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.certificates_getInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.certificates_getInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.certificates_getInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.certificates_getInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CertificateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.CertificateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_getInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_getInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Certificate
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.certificates_getInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.certificates_getInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)`.
    package enum certificates_deleteInstance {
        package static let id: Swift.String = "certificates_deleteInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.certificates_deleteInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.certificates_deleteInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.certificates_deleteInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.certificates_deleteInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.certificates_deleteInstance.Input.Path,
                headers: Operations.certificates_deleteInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_deleteInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_deleteInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.certificates_deleteInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.certificates_deleteInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_deleteInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_deleteInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.certificates_deleteInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.certificates_deleteInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_deleteInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_deleteInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.certificates_deleteInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.certificates_deleteInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_deleteInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_deleteInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.certificates_deleteInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.certificates_deleteInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.certificates_deleteInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.certificates_deleteInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.certificates_deleteInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.certificates_deleteInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.certificates_deleteInstance.Output.NoContent)
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.certificates_deleteInstance.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)`.
    package enum devices_getCollection {
        package static let id: Swift.String = "devices_getCollection"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/devices/GET/query`.
            package struct Query: Sendable, Hashable {
                /// filter by attribute 'name'
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[name]`.
                package var filter_lbrack_name_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter_lbrack_platform_rbrack_Payload`.
                @frozen package enum filter_lbrack_platform_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case IOS = "IOS"
                    case MAC_OS = "MAC_OS"
                    case UNIVERSAL = "UNIVERSAL"
                }
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[platform]`.
                package typealias filter_lbrack_platform_rbrack_Payload = [Operations.devices_getCollection.Input.Query.filter_lbrack_platform_rbrack_PayloadPayload]
                /// filter by attribute 'platform'
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[platform]`.
                package var filter_lbrack_platform_rbrack_: Operations.devices_getCollection.Input.Query.filter_lbrack_platform_rbrack_Payload?
                /// filter by attribute 'udid'
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[udid]`.
                package var filter_lbrack_udid_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter_lbrack_status_rbrack_Payload`.
                @frozen package enum filter_lbrack_status_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ENABLED = "ENABLED"
                    case DISABLED = "DISABLED"
                }
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[status]`.
                package typealias filter_lbrack_status_rbrack_Payload = [Operations.devices_getCollection.Input.Query.filter_lbrack_status_rbrack_PayloadPayload]
                /// filter by attribute 'status'
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[status]`.
                package var filter_lbrack_status_rbrack_: Operations.devices_getCollection.Input.Query.filter_lbrack_status_rbrack_Payload?
                /// filter by id(s)
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[id]`.
                package var filter_lbrack_id_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/sortPayload`.
                @frozen package enum sortPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case _hyphen_name = "-name"
                    case platform = "platform"
                    case _hyphen_platform = "-platform"
                    case udid = "udid"
                    case _hyphen_udid = "-udid"
                    case status = "status"
                    case _hyphen_status = "-status"
                    case id = "id"
                    case _hyphen_id = "-id"
                }
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/sort`.
                package typealias sortPayload = [Operations.devices_getCollection.Input.Query.sortPayloadPayload]
                /// comma-separated list of sort expressions; resources will be sorted as specified
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/sort`.
                package var sort: Operations.devices_getCollection.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/fields_lbrack_devices_rbrack_Payload`.
                @frozen package enum fields_lbrack_devices_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/fields[devices]`.
                package typealias fields_lbrack_devices_rbrack_Payload = [Operations.devices_getCollection.Input.Query.fields_lbrack_devices_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/fields[devices]`.
                package var fields_lbrack_devices_rbrack_: Operations.devices_getCollection.Input.Query.fields_lbrack_devices_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/limit`.
                package var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter_lbrack_name_rbrack_: filter by attribute 'name'
                ///   - filter_lbrack_platform_rbrack_: filter by attribute 'platform'
                ///   - filter_lbrack_udid_rbrack_: filter by attribute 'udid'
                ///   - filter_lbrack_status_rbrack_: filter by attribute 'status'
                ///   - filter_lbrack_id_rbrack_: filter by id(s)
                ///   - sort: comma-separated list of sort expressions; resources will be sorted as specified
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                ///   - limit: maximum resources per page
                package init(
                    filter_lbrack_name_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_platform_rbrack_: Operations.devices_getCollection.Input.Query.filter_lbrack_platform_rbrack_Payload? = nil,
                    filter_lbrack_udid_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_status_rbrack_: Operations.devices_getCollection.Input.Query.filter_lbrack_status_rbrack_Payload? = nil,
                    filter_lbrack_id_rbrack_: [Swift.String]? = nil,
                    sort: Operations.devices_getCollection.Input.Query.sortPayload? = nil,
                    fields_lbrack_devices_rbrack_: Operations.devices_getCollection.Input.Query.fields_lbrack_devices_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.filter_lbrack_name_rbrack_ = filter_lbrack_name_rbrack_
                    self.filter_lbrack_platform_rbrack_ = filter_lbrack_platform_rbrack_
                    self.filter_lbrack_udid_rbrack_ = filter_lbrack_udid_rbrack_
                    self.filter_lbrack_status_rbrack_ = filter_lbrack_status_rbrack_
                    self.filter_lbrack_id_rbrack_ = filter_lbrack_id_rbrack_
                    self.sort = sort
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                    self.limit = limit
                }
            }
            package var query: Operations.devices_getCollection.Input.Query
            /// - Remark: Generated from `#/paths/v1/devices/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.devices_getCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.devices_getCollection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.devices_getCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.devices_getCollection.Input.Query = .init(),
                headers: Operations.devices_getCollection.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getCollection.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getCollection.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.devices_getCollection.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.devices_getCollection.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getCollection.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getCollection.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.devices_getCollection.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.devices_getCollection.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getCollection.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getCollection.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.devices_getCollection.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.devices_getCollection.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DevicesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.DevicesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getCollection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Devices
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.devices_getCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.devices_getCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)`.
    package enum devices_createInstance {
        package static let id: Swift.String = "devices_createInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/devices/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.devices_createInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.devices_createInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.devices_createInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/devices/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.DeviceCreateRequest)
            }
            package var body: Operations.devices_createInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.devices_createInstance.Input.Headers = .init(),
                body: Operations.devices_createInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_createInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_createInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.devices_createInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.devices_createInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_createInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_createInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.devices_createInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.devices_createInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_createInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_createInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.devices_createInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.devices_createInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_createInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_createInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.devices_createInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.devices_createInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.DeviceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.DeviceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_createInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_createInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single Device
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.devices_createInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.devices_createInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_createInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_createInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.devices_createInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.devices_createInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)`.
    package enum devices_getInstance {
        package static let id: Swift.String = "devices_getInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.devices_getInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/query/fields_lbrack_devices_rbrack_Payload`.
                @frozen package enum fields_lbrack_devices_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/query/fields[devices]`.
                package typealias fields_lbrack_devices_rbrack_Payload = [Operations.devices_getInstance.Input.Query.fields_lbrack_devices_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/query/fields[devices]`.
                package var fields_lbrack_devices_rbrack_: Operations.devices_getInstance.Input.Query.fields_lbrack_devices_rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                package init(fields_lbrack_devices_rbrack_: Operations.devices_getInstance.Input.Query.fields_lbrack_devices_rbrack_Payload? = nil) {
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                }
            }
            package var query: Operations.devices_getInstance.Input.Query
            /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.devices_getInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.devices_getInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.devices_getInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.devices_getInstance.Input.Path,
                query: Operations.devices_getInstance.Input.Query = .init(),
                headers: Operations.devices_getInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.devices_getInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.devices_getInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.devices_getInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.devices_getInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.devices_getInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.devices_getInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.devices_getInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.devices_getInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeviceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.DeviceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_getInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_getInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Device
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.devices_getInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.devices_getInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)`.
    package enum devices_updateInstance {
        package static let id: Swift.String = "devices_updateInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.devices_updateInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.devices_updateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.devices_updateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.devices_updateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.DeviceUpdateRequest)
            }
            package var body: Operations.devices_updateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.devices_updateInstance.Input.Path,
                headers: Operations.devices_updateInstance.Input.Headers = .init(),
                body: Operations.devices_updateInstance.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_updateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_updateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.devices_updateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.devices_updateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_updateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_updateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.devices_updateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.devices_updateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_updateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_updateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.devices_updateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.devices_updateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_updateInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_updateInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.devices_updateInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.devices_updateInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_updateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_updateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.devices_updateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.devices_updateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeviceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.DeviceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_updateInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_updateInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Device
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.devices_updateInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.devices_updateInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.devices_updateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.devices_updateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.devices_updateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.devices_updateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)`.
    package enum profiles_getCollection {
        package static let id: Swift.String = "profiles_getCollection"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/GET/query`.
            package struct Query: Sendable, Hashable {
                /// filter by attribute 'name'
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[name]`.
                package var filter_lbrack_name_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter_lbrack_profileType_rbrack_Payload`.
                @frozen package enum filter_lbrack_profileType_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case IOS_APP_DEVELOPMENT = "IOS_APP_DEVELOPMENT"
                    case IOS_APP_STORE = "IOS_APP_STORE"
                    case IOS_APP_ADHOC = "IOS_APP_ADHOC"
                    case IOS_APP_INHOUSE = "IOS_APP_INHOUSE"
                    case MAC_APP_DEVELOPMENT = "MAC_APP_DEVELOPMENT"
                    case MAC_APP_STORE = "MAC_APP_STORE"
                    case MAC_APP_DIRECT = "MAC_APP_DIRECT"
                    case TVOS_APP_DEVELOPMENT = "TVOS_APP_DEVELOPMENT"
                    case TVOS_APP_STORE = "TVOS_APP_STORE"
                    case TVOS_APP_ADHOC = "TVOS_APP_ADHOC"
                    case TVOS_APP_INHOUSE = "TVOS_APP_INHOUSE"
                    case MAC_CATALYST_APP_DEVELOPMENT = "MAC_CATALYST_APP_DEVELOPMENT"
                    case MAC_CATALYST_APP_STORE = "MAC_CATALYST_APP_STORE"
                    case MAC_CATALYST_APP_DIRECT = "MAC_CATALYST_APP_DIRECT"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[profileType]`.
                package typealias filter_lbrack_profileType_rbrack_Payload = [Operations.profiles_getCollection.Input.Query.filter_lbrack_profileType_rbrack_PayloadPayload]
                /// filter by attribute 'profileType'
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[profileType]`.
                package var filter_lbrack_profileType_rbrack_: Operations.profiles_getCollection.Input.Query.filter_lbrack_profileType_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter_lbrack_profileState_rbrack_Payload`.
                @frozen package enum filter_lbrack_profileState_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ACTIVE = "ACTIVE"
                    case INVALID = "INVALID"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[profileState]`.
                package typealias filter_lbrack_profileState_rbrack_Payload = [Operations.profiles_getCollection.Input.Query.filter_lbrack_profileState_rbrack_PayloadPayload]
                /// filter by attribute 'profileState'
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[profileState]`.
                package var filter_lbrack_profileState_rbrack_: Operations.profiles_getCollection.Input.Query.filter_lbrack_profileState_rbrack_Payload?
                /// filter by id(s)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[id]`.
                package var filter_lbrack_id_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/sortPayload`.
                @frozen package enum sortPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case _hyphen_name = "-name"
                    case profileType = "profileType"
                    case _hyphen_profileType = "-profileType"
                    case profileState = "profileState"
                    case _hyphen_profileState = "-profileState"
                    case id = "id"
                    case _hyphen_id = "-id"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/sort`.
                package typealias sortPayload = [Operations.profiles_getCollection.Input.Query.sortPayloadPayload]
                /// comma-separated list of sort expressions; resources will be sorted as specified
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/sort`.
                package var sort: Operations.profiles_getCollection.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields_lbrack_profiles_rbrack_Payload`.
                @frozen package enum fields_lbrack_profiles_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[profiles]`.
                package typealias fields_lbrack_profiles_rbrack_Payload = [Operations.profiles_getCollection.Input.Query.fields_lbrack_profiles_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[profiles]`.
                package var fields_lbrack_profiles_rbrack_: Operations.profiles_getCollection.Input.Query.fields_lbrack_profiles_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen package enum fields_lbrack_bundleIds_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[bundleIds]`.
                package typealias fields_lbrack_bundleIds_rbrack_Payload = [Operations.profiles_getCollection.Input.Query.fields_lbrack_bundleIds_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[bundleIds]`.
                package var fields_lbrack_bundleIds_rbrack_: Operations.profiles_getCollection.Input.Query.fields_lbrack_bundleIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields_lbrack_devices_rbrack_Payload`.
                @frozen package enum fields_lbrack_devices_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[devices]`.
                package typealias fields_lbrack_devices_rbrack_Payload = [Operations.profiles_getCollection.Input.Query.fields_lbrack_devices_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[devices]`.
                package var fields_lbrack_devices_rbrack_: Operations.profiles_getCollection.Input.Query.fields_lbrack_devices_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields_lbrack_certificates_rbrack_Payload`.
                @frozen package enum fields_lbrack_certificates_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[certificates]`.
                package typealias fields_lbrack_certificates_rbrack_Payload = [Operations.profiles_getCollection.Input.Query.fields_lbrack_certificates_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[certificates]`.
                package var fields_lbrack_certificates_rbrack_: Operations.profiles_getCollection.Input.Query.fields_lbrack_certificates_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/limit`.
                package var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/includePayload`.
                @frozen package enum includePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/include`.
                package typealias includePayload = [Operations.profiles_getCollection.Input.Query.includePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/include`.
                package var include: Operations.profiles_getCollection.Input.Query.includePayload?
                /// maximum number of related certificates returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/limit[certificates]`.
                package var limit_lbrack_certificates_rbrack_: Swift.Int?
                /// maximum number of related devices returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/limit[devices]`.
                package var limit_lbrack_devices_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter_lbrack_name_rbrack_: filter by attribute 'name'
                ///   - filter_lbrack_profileType_rbrack_: filter by attribute 'profileType'
                ///   - filter_lbrack_profileState_rbrack_: filter by attribute 'profileState'
                ///   - filter_lbrack_id_rbrack_: filter by id(s)
                ///   - sort: comma-separated list of sort expressions; resources will be sorted as specified
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - limit: maximum resources per page
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_certificates_rbrack_: maximum number of related certificates returned (when they are included)
                ///   - limit_lbrack_devices_rbrack_: maximum number of related devices returned (when they are included)
                package init(
                    filter_lbrack_name_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_profileType_rbrack_: Operations.profiles_getCollection.Input.Query.filter_lbrack_profileType_rbrack_Payload? = nil,
                    filter_lbrack_profileState_rbrack_: Operations.profiles_getCollection.Input.Query.filter_lbrack_profileState_rbrack_Payload? = nil,
                    filter_lbrack_id_rbrack_: [Swift.String]? = nil,
                    sort: Operations.profiles_getCollection.Input.Query.sortPayload? = nil,
                    fields_lbrack_profiles_rbrack_: Operations.profiles_getCollection.Input.Query.fields_lbrack_profiles_rbrack_Payload? = nil,
                    fields_lbrack_bundleIds_rbrack_: Operations.profiles_getCollection.Input.Query.fields_lbrack_bundleIds_rbrack_Payload? = nil,
                    fields_lbrack_devices_rbrack_: Operations.profiles_getCollection.Input.Query.fields_lbrack_devices_rbrack_Payload? = nil,
                    fields_lbrack_certificates_rbrack_: Operations.profiles_getCollection.Input.Query.fields_lbrack_certificates_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil,
                    include: Operations.profiles_getCollection.Input.Query.includePayload? = nil,
                    limit_lbrack_certificates_rbrack_: Swift.Int? = nil,
                    limit_lbrack_devices_rbrack_: Swift.Int? = nil
                ) {
                    self.filter_lbrack_name_rbrack_ = filter_lbrack_name_rbrack_
                    self.filter_lbrack_profileType_rbrack_ = filter_lbrack_profileType_rbrack_
                    self.filter_lbrack_profileState_rbrack_ = filter_lbrack_profileState_rbrack_
                    self.filter_lbrack_id_rbrack_ = filter_lbrack_id_rbrack_
                    self.sort = sort
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.limit = limit
                    self.include = include
                    self.limit_lbrack_certificates_rbrack_ = limit_lbrack_certificates_rbrack_
                    self.limit_lbrack_devices_rbrack_ = limit_lbrack_devices_rbrack_
                }
            }
            package var query: Operations.profiles_getCollection.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_getCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_getCollection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.profiles_getCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.profiles_getCollection.Input.Query = .init(),
                headers: Operations.profiles_getCollection.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getCollection.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getCollection.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.profiles_getCollection.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.profiles_getCollection.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getCollection.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getCollection.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.profiles_getCollection.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.profiles_getCollection.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getCollection.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getCollection.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.profiles_getCollection.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.profiles_getCollection.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfilesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProfilesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getCollection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Profiles
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.profiles_getCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.profiles_getCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)`.
    package enum profiles_createInstance {
        package static let id: Swift.String = "profiles_createInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_createInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_createInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.profiles_createInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/profiles/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ProfileCreateRequest)
            }
            package var body: Operations.profiles_createInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.profiles_createInstance.Input.Headers = .init(),
                body: Operations.profiles_createInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_createInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_createInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.profiles_createInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.profiles_createInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_createInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_createInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.profiles_createInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.profiles_createInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_createInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_createInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.profiles_createInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.profiles_createInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_createInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_createInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.profiles_createInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.profiles_createInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ProfileResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProfileResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_createInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_createInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single Profile
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.profiles_createInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.profiles_createInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_createInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_createInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.profiles_createInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.profiles_createInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)`.
    package enum profiles_getInstance {
        package static let id: Swift.String = "profiles_getInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.profiles_getInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields_lbrack_profiles_rbrack_Payload`.
                @frozen package enum fields_lbrack_profiles_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[profiles]`.
                package typealias fields_lbrack_profiles_rbrack_Payload = [Operations.profiles_getInstance.Input.Query.fields_lbrack_profiles_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[profiles]`.
                package var fields_lbrack_profiles_rbrack_: Operations.profiles_getInstance.Input.Query.fields_lbrack_profiles_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen package enum fields_lbrack_bundleIds_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[bundleIds]`.
                package typealias fields_lbrack_bundleIds_rbrack_Payload = [Operations.profiles_getInstance.Input.Query.fields_lbrack_bundleIds_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[bundleIds]`.
                package var fields_lbrack_bundleIds_rbrack_: Operations.profiles_getInstance.Input.Query.fields_lbrack_bundleIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields_lbrack_devices_rbrack_Payload`.
                @frozen package enum fields_lbrack_devices_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[devices]`.
                package typealias fields_lbrack_devices_rbrack_Payload = [Operations.profiles_getInstance.Input.Query.fields_lbrack_devices_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[devices]`.
                package var fields_lbrack_devices_rbrack_: Operations.profiles_getInstance.Input.Query.fields_lbrack_devices_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields_lbrack_certificates_rbrack_Payload`.
                @frozen package enum fields_lbrack_certificates_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[certificates]`.
                package typealias fields_lbrack_certificates_rbrack_Payload = [Operations.profiles_getInstance.Input.Query.fields_lbrack_certificates_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[certificates]`.
                package var fields_lbrack_certificates_rbrack_: Operations.profiles_getInstance.Input.Query.fields_lbrack_certificates_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/includePayload`.
                @frozen package enum includePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/include`.
                package typealias includePayload = [Operations.profiles_getInstance.Input.Query.includePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/include`.
                package var include: Operations.profiles_getInstance.Input.Query.includePayload?
                /// maximum number of related certificates returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/limit[certificates]`.
                package var limit_lbrack_certificates_rbrack_: Swift.Int?
                /// maximum number of related devices returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/limit[devices]`.
                package var limit_lbrack_devices_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_certificates_rbrack_: maximum number of related certificates returned (when they are included)
                ///   - limit_lbrack_devices_rbrack_: maximum number of related devices returned (when they are included)
                package init(
                    fields_lbrack_profiles_rbrack_: Operations.profiles_getInstance.Input.Query.fields_lbrack_profiles_rbrack_Payload? = nil,
                    fields_lbrack_bundleIds_rbrack_: Operations.profiles_getInstance.Input.Query.fields_lbrack_bundleIds_rbrack_Payload? = nil,
                    fields_lbrack_devices_rbrack_: Operations.profiles_getInstance.Input.Query.fields_lbrack_devices_rbrack_Payload? = nil,
                    fields_lbrack_certificates_rbrack_: Operations.profiles_getInstance.Input.Query.fields_lbrack_certificates_rbrack_Payload? = nil,
                    include: Operations.profiles_getInstance.Input.Query.includePayload? = nil,
                    limit_lbrack_certificates_rbrack_: Swift.Int? = nil,
                    limit_lbrack_devices_rbrack_: Swift.Int? = nil
                ) {
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.include = include
                    self.limit_lbrack_certificates_rbrack_ = limit_lbrack_certificates_rbrack_
                    self.limit_lbrack_devices_rbrack_ = limit_lbrack_devices_rbrack_
                }
            }
            package var query: Operations.profiles_getInstance.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_getInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_getInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.profiles_getInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.profiles_getInstance.Input.Path,
                query: Operations.profiles_getInstance.Input.Query = .init(),
                headers: Operations.profiles_getInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.profiles_getInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.profiles_getInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.profiles_getInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.profiles_getInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.profiles_getInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.profiles_getInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.profiles_getInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.profiles_getInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfileResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProfileResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_getInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_getInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Profile
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.profiles_getInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.profiles_getInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)`.
    package enum profiles_deleteInstance {
        package static let id: Swift.String = "profiles_deleteInstance"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.profiles_deleteInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_deleteInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_deleteInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.profiles_deleteInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.profiles_deleteInstance.Input.Path,
                headers: Operations.profiles_deleteInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_deleteInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_deleteInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.profiles_deleteInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.profiles_deleteInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_deleteInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_deleteInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.profiles_deleteInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.profiles_deleteInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_deleteInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_deleteInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.profiles_deleteInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.profiles_deleteInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_deleteInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_deleteInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.profiles_deleteInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.profiles_deleteInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_deleteInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_deleteInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.profiles_deleteInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.profiles_deleteInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.profiles_deleteInstance.Output.NoContent)
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.profiles_deleteInstance.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)`.
    package enum bundleIds_app_getToOneRelated {
        package static let id: Swift.String = "bundleIds_app_getToOneRelated"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.bundleIds_app_getToOneRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/query/fields_lbrack_apps_rbrack_Payload`.
                @frozen package enum fields_lbrack_apps_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case bundleId = "bundleId"
                    case sku = "sku"
                    case primaryLocale = "primaryLocale"
                    case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
                    case subscriptionStatusUrl = "subscriptionStatusUrl"
                    case subscriptionStatusUrlVersion = "subscriptionStatusUrlVersion"
                    case subscriptionStatusUrlForSandbox = "subscriptionStatusUrlForSandbox"
                    case subscriptionStatusUrlVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                    case contentRightsDeclaration = "contentRightsDeclaration"
                    case streamlinedPurchasingEnabled = "streamlinedPurchasingEnabled"
                    case appEncryptionDeclarations = "appEncryptionDeclarations"
                    case ciProduct = "ciProduct"
                    case betaTesters = "betaTesters"
                    case betaGroups = "betaGroups"
                    case appStoreVersions = "appStoreVersions"
                    case preReleaseVersions = "preReleaseVersions"
                    case betaAppLocalizations = "betaAppLocalizations"
                    case builds = "builds"
                    case betaLicenseAgreement = "betaLicenseAgreement"
                    case betaAppReviewDetail = "betaAppReviewDetail"
                    case appInfos = "appInfos"
                    case appClips = "appClips"
                    case appPricePoints = "appPricePoints"
                    case endUserLicenseAgreement = "endUserLicenseAgreement"
                    case appPriceSchedule = "appPriceSchedule"
                    case appAvailabilityV2 = "appAvailabilityV2"
                    case inAppPurchases = "inAppPurchases"
                    case subscriptionGroups = "subscriptionGroups"
                    case gameCenterEnabledVersions = "gameCenterEnabledVersions"
                    case perfPowerMetrics = "perfPowerMetrics"
                    case appCustomProductPages = "appCustomProductPages"
                    case inAppPurchasesV2 = "inAppPurchasesV2"
                    case promotedPurchases = "promotedPurchases"
                    case appEvents = "appEvents"
                    case reviewSubmissions = "reviewSubmissions"
                    case subscriptionGracePeriod = "subscriptionGracePeriod"
                    case customerReviews = "customerReviews"
                    case gameCenterDetail = "gameCenterDetail"
                    case appStoreVersionExperimentsV2 = "appStoreVersionExperimentsV2"
                    case alternativeDistributionKey = "alternativeDistributionKey"
                    case analyticsReportRequests = "analyticsReportRequests"
                    case marketplaceSearchDetail = "marketplaceSearchDetail"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/query/fields[apps]`.
                package typealias fields_lbrack_apps_rbrack_Payload = [Operations.bundleIds_app_getToOneRelated.Input.Query.fields_lbrack_apps_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type apps
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/query/fields[apps]`.
                package var fields_lbrack_apps_rbrack_: Operations.bundleIds_app_getToOneRelated.Input.Query.fields_lbrack_apps_rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_apps_rbrack_: the fields to include for returned resources of type apps
                package init(fields_lbrack_apps_rbrack_: Operations.bundleIds_app_getToOneRelated.Input.Query.fields_lbrack_apps_rbrack_Payload? = nil) {
                    self.fields_lbrack_apps_rbrack_ = fields_lbrack_apps_rbrack_
                }
            }
            package var query: Operations.bundleIds_app_getToOneRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_app_getToOneRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_app_getToOneRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIds_app_getToOneRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.bundleIds_app_getToOneRelated.Input.Path,
                query: Operations.bundleIds_app_getToOneRelated.Input.Query = .init(),
                headers: Operations.bundleIds_app_getToOneRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_app_getToOneRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_app_getToOneRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIds_app_getToOneRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIds_app_getToOneRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_app_getToOneRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_app_getToOneRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIds_app_getToOneRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIds_app_getToOneRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_app_getToOneRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_app_getToOneRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIds_app_getToOneRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIds_app_getToOneRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_app_getToOneRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_app_getToOneRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bundleIds_app_getToOneRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.bundleIds_app_getToOneRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.AppWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_app_getToOneRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_app_getToOneRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single App with get
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bundleIds_app_getToOneRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.bundleIds_app_getToOneRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)`.
    package enum bundleIds_bundleIdCapabilities_getToManyRelated {
        package static let id: Swift.String = "bundleIds_bundleIdCapabilities_getToManyRelated"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query/fields_lbrack_bundleIdCapabilities_rbrack_Payload`.
                @frozen package enum fields_lbrack_bundleIdCapabilities_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case capabilityType = "capabilityType"
                    case settings = "settings"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query/fields[bundleIdCapabilities]`.
                package typealias fields_lbrack_bundleIdCapabilities_rbrack_Payload = [Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type bundleIdCapabilities
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query/fields[bundleIdCapabilities]`.
                package var fields_lbrack_bundleIdCapabilities_rbrack_: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query/limit`.
                package var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_bundleIdCapabilities_rbrack_: the fields to include for returned resources of type bundleIdCapabilities
                ///   - limit: maximum resources per page
                package init(
                    fields_lbrack_bundleIdCapabilities_rbrack_: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Query.fields_lbrack_bundleIdCapabilities_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.fields_lbrack_bundleIdCapabilities_rbrack_ = fields_lbrack_bundleIdCapabilities_rbrack_
                    self.limit = limit
                }
            }
            package var query: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_bundleIdCapabilities_getToManyRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_bundleIdCapabilities_getToManyRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Path,
                query: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Query = .init(),
                headers: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdCapabilitiesWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BundleIdCapabilitiesWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of BundleIdCapabilities with get
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.bundleIds_bundleIdCapabilities_getToManyRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)`.
    package enum bundleIds_profiles_getToManyRelated {
        package static let id: Swift.String = "bundleIds_profiles_getToManyRelated"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.bundleIds_profiles_getToManyRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query/fields_lbrack_profiles_rbrack_Payload`.
                @frozen package enum fields_lbrack_profiles_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query/fields[profiles]`.
                package typealias fields_lbrack_profiles_rbrack_Payload = [Operations.bundleIds_profiles_getToManyRelated.Input.Query.fields_lbrack_profiles_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query/fields[profiles]`.
                package var fields_lbrack_profiles_rbrack_: Operations.bundleIds_profiles_getToManyRelated.Input.Query.fields_lbrack_profiles_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query/limit`.
                package var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - limit: maximum resources per page
                package init(
                    fields_lbrack_profiles_rbrack_: Operations.bundleIds_profiles_getToManyRelated.Input.Query.fields_lbrack_profiles_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.limit = limit
                }
            }
            package var query: Operations.bundleIds_profiles_getToManyRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_profiles_getToManyRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bundleIds_profiles_getToManyRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.bundleIds_profiles_getToManyRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.bundleIds_profiles_getToManyRelated.Input.Path,
                query: Operations.bundleIds_profiles_getToManyRelated.Input.Query = .init(),
                headers: Operations.bundleIds_profiles_getToManyRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_profiles_getToManyRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_profiles_getToManyRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bundleIds_profiles_getToManyRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.bundleIds_profiles_getToManyRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_profiles_getToManyRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_profiles_getToManyRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.bundleIds_profiles_getToManyRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.bundleIds_profiles_getToManyRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_profiles_getToManyRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_profiles_getToManyRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.bundleIds_profiles_getToManyRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.bundleIds_profiles_getToManyRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_profiles_getToManyRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_profiles_getToManyRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bundleIds_profiles_getToManyRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.bundleIds_profiles_getToManyRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfilesWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProfilesWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.bundleIds_profiles_getToManyRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.bundleIds_profiles_getToManyRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Profiles with get
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bundleIds_profiles_getToManyRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.bundleIds_profiles_getToManyRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)`.
    package enum profiles_bundleId_getToOneRelated {
        package static let id: Swift.String = "profiles_bundleId_getToOneRelated"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.profiles_bundleId_getToOneRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/query/fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen package enum fields_lbrack_bundleIds_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/query/fields[bundleIds]`.
                package typealias fields_lbrack_bundleIds_rbrack_Payload = [Operations.profiles_bundleId_getToOneRelated.Input.Query.fields_lbrack_bundleIds_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/query/fields[bundleIds]`.
                package var fields_lbrack_bundleIds_rbrack_: Operations.profiles_bundleId_getToOneRelated.Input.Query.fields_lbrack_bundleIds_rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                package init(fields_lbrack_bundleIds_rbrack_: Operations.profiles_bundleId_getToOneRelated.Input.Query.fields_lbrack_bundleIds_rbrack_Payload? = nil) {
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                }
            }
            package var query: Operations.profiles_bundleId_getToOneRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_bundleId_getToOneRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_bundleId_getToOneRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.profiles_bundleId_getToOneRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.profiles_bundleId_getToOneRelated.Input.Path,
                query: Operations.profiles_bundleId_getToOneRelated.Input.Query = .init(),
                headers: Operations.profiles_bundleId_getToOneRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_bundleId_getToOneRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_bundleId_getToOneRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.profiles_bundleId_getToOneRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.profiles_bundleId_getToOneRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_bundleId_getToOneRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_bundleId_getToOneRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.profiles_bundleId_getToOneRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.profiles_bundleId_getToOneRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_bundleId_getToOneRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_bundleId_getToOneRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.profiles_bundleId_getToOneRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.profiles_bundleId_getToOneRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_bundleId_getToOneRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_bundleId_getToOneRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.profiles_bundleId_getToOneRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.profiles_bundleId_getToOneRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BundleIdWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_bundleId_getToOneRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_bundleId_getToOneRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single BundleId with get
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.profiles_bundleId_getToOneRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.profiles_bundleId_getToOneRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)`.
    package enum profiles_certificates_getToManyRelated {
        package static let id: Swift.String = "profiles_certificates_getToManyRelated"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.profiles_certificates_getToManyRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query/fields_lbrack_certificates_rbrack_Payload`.
                @frozen package enum fields_lbrack_certificates_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query/fields[certificates]`.
                package typealias fields_lbrack_certificates_rbrack_Payload = [Operations.profiles_certificates_getToManyRelated.Input.Query.fields_lbrack_certificates_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query/fields[certificates]`.
                package var fields_lbrack_certificates_rbrack_: Operations.profiles_certificates_getToManyRelated.Input.Query.fields_lbrack_certificates_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query/limit`.
                package var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - limit: maximum resources per page
                package init(
                    fields_lbrack_certificates_rbrack_: Operations.profiles_certificates_getToManyRelated.Input.Query.fields_lbrack_certificates_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.limit = limit
                }
            }
            package var query: Operations.profiles_certificates_getToManyRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_certificates_getToManyRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_certificates_getToManyRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.profiles_certificates_getToManyRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.profiles_certificates_getToManyRelated.Input.Path,
                query: Operations.profiles_certificates_getToManyRelated.Input.Query = .init(),
                headers: Operations.profiles_certificates_getToManyRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_certificates_getToManyRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_certificates_getToManyRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.profiles_certificates_getToManyRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.profiles_certificates_getToManyRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_certificates_getToManyRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_certificates_getToManyRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.profiles_certificates_getToManyRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.profiles_certificates_getToManyRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_certificates_getToManyRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_certificates_getToManyRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.profiles_certificates_getToManyRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.profiles_certificates_getToManyRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_certificates_getToManyRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_certificates_getToManyRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.profiles_certificates_getToManyRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.profiles_certificates_getToManyRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CertificatesWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.CertificatesWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_certificates_getToManyRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_certificates_getToManyRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Certificates with get
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.profiles_certificates_getToManyRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.profiles_certificates_getToManyRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)`.
    package enum profiles_devices_getToManyRelated {
        package static let id: Swift.String = "profiles_devices_getToManyRelated"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/path`.
            package struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.profiles_devices_getToManyRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query/fields_lbrack_devices_rbrack_Payload`.
                @frozen package enum fields_lbrack_devices_rbrack_PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query/fields[devices]`.
                package typealias fields_lbrack_devices_rbrack_Payload = [Operations.profiles_devices_getToManyRelated.Input.Query.fields_lbrack_devices_rbrack_PayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query/fields[devices]`.
                package var fields_lbrack_devices_rbrack_: Operations.profiles_devices_getToManyRelated.Input.Query.fields_lbrack_devices_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query/limit`.
                package var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                ///   - limit: maximum resources per page
                package init(
                    fields_lbrack_devices_rbrack_: Operations.profiles_devices_getToManyRelated.Input.Query.fields_lbrack_devices_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                    self.limit = limit
                }
            }
            package var query: Operations.profiles_devices_getToManyRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_devices_getToManyRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.profiles_devices_getToManyRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.profiles_devices_getToManyRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.profiles_devices_getToManyRelated.Input.Path,
                query: Operations.profiles_devices_getToManyRelated.Input.Query = .init(),
                headers: Operations.profiles_devices_getToManyRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_devices_getToManyRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_devices_getToManyRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.profiles_devices_getToManyRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.profiles_devices_getToManyRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_devices_getToManyRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_devices_getToManyRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.profiles_devices_getToManyRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.profiles_devices_getToManyRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_devices_getToManyRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_devices_getToManyRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.profiles_devices_getToManyRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.profiles_devices_getToManyRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_devices_getToManyRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_devices_getToManyRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.profiles_devices_getToManyRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.profiles_devices_getToManyRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DevicesWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.DevicesWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.profiles_devices_getToManyRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.profiles_devices_getToManyRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Devices with get
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.profiles_devices_getToManyRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.profiles_devices_getToManyRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
